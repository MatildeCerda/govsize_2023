summary(quad_2_mco)
View(df_seas)
quad_2_fmols <- cointReg(method = c("FM"), df_seas[,8], df_seas[,11:16])
print(lin_2_fmols)
print(quad_2_fmols)
install.packages("xtable")
library(xtable)
jotest_table <- rbind.data.frame(c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"))
View(jotest)
View(jotest)
View(jotest)
View(jotest_table)
library(xtable)#para tablas de latex
print(xtable(jotest_table, type="latex"))
jotest_table <- data.frame(c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"))
View(jotest_table)
jotest_table <- rbind.data.frame(c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"))
help("rbind.data.frame")
install.packages(c("cpp11", "dbplyr", "digest", "haven", "jsonlite", "KernSmooth", "Matrix", "MatrixModels", "mgcv", "pkgload", "processx", "Rcpp", "readxl", "rmarkdown", "rstudioapi", "testthat", "xml2"))
install.packages(c("cpp11", "dbplyr", "digest", "haven", "jsonlite", "KernSmooth", "Matrix", "MatrixModels", "mgcv", "pkgload", "processx", "Rcpp", "readxl", "rmarkdown", "rstudioapi", "testthat", "xml2"))
install.packages(c("cpp11", "dbplyr", "digest", "haven", "jsonlite", "KernSmooth", "Matrix", "MatrixModels", "mgcv", "pkgload", "processx", "Rcpp", "readxl", "rmarkdown", "rstudioapi", "testthat", "xml2"))
library(tidyverse)#manipulation de datos en general
library(xtable)#para tablas de latex
library(cointReg)#para FMOLS
library(urca)#para test de Johansen
library(dplyr)#manipulacion de datos en general
library(googlesheets4)#para importar de G. Drive
library(TSstudio)
library(patchwork)#para combinar graficos en una imagen
library(zoo)#funciones de series de tiempo
library(seasonal)#Para desestacionalizar
library(TSstudio)#PAra desestacionalizar
library(ggpubr)
library(patchwork) # para combinar graficos
raw_data <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA",
col_names = TRUE,
range = "A1:H65"
)
raw_data <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA",
col_names = TRUE,
range = "A1:H65"
)
raw_data <- raw_data %>%
rename(
"date" = "DATE",
"gdp" = "RAW_GDP",
"gov_con" = "RAW_GOV_CON",
"pub_inv" = "RAW_PUB_INV",
"priv_inv" = "RAW_PRIV_INV",
"x" = "RAW_X",
"m" = "RAW_M",
"pop" = "RAW_POP"
)
var_names_bcn <- c("date", "gdp", "gov_con", "pub_inv", "priv_inv", "x", "m", "pop")
raw_data <- raw_data %>%
mutate(
gdp = gdp*10^6,
gov_con =gov_con*10^6,
pub_inv= pub_inv*10^6,
priv_inv=priv_inv*10^6,
x=x*10^6,
m=m*10^6
)
raw_pop <- ggplot(raw_data, aes(x = as.Date(date), y = pop)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_pop
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag_1_pop-1,0)
)
setwd("/Users/axelcanales/Documents/GitHub/r_cortetransversal_2023")
datos1 <- read_xlsx("tipo de cambio.xlsx6", col_names = TRUE, sheet = 1)
library("readxl")
datos1 <- read_xlsx("tipo de cambio.xlsx6", col_names = TRUE, sheet = 1)
datos1 <- read_xlsx("tipo de cambio.xlsx", col_names = TRUE, sheet = 1)
setwd("/Users/axelcanales/Documents/GitHub/r_cortetransversal_2023/Tarea 6")
datos1 <- read_xlsx("tipo de cambio.xlsx", col_names = TRUE, sheet = 1)
View(datos1)
View(datos1)
modelo_sr <- lm(TC ~ TBP + IMAE, datos1)
library(stargazer)
stargazer(modelo_sr)
stargazer(modelo_sr, type='text')
SRC_sr<-sum((modelo_sr1$residuals^{2}))
SRC_sr<-sum((modelo_sr$residuals^{2}))
modelo_r <- lm(TC ~ TBP + IMAE, datos1)
SRC_sr<-sum((modelo_r$residuals^{2}))
SRC_sr<-sum((modelo_r$residuals^{2}))
SRC_r<-sum((modelo_r$residuals^{2}))
rm(SCR_sr)
rm(SRC_sr)
rm(modelo_sr)
help(if)
datos1$mes/año <- as.Date( datos1$mes/año, tryFormats=c("%d/%m/%Y") )
View(datos1)
names(datos1)
help(rename)
rename(datos1,
"fecha" = "mes/año"
)
datos1$fecha <- as.Date( datos1$fecha, tryFormats=c("%d/%m/%Y") )
View(datos1)
names(datos1)
datos1 %<%
rename(datos1,
"fecha" = "mes/año"
)
library(dplyr)
datos1 %<%
rename(datos1,
"fecha" = "mes/año"
)
library(tidyr)
datos1 %<%
rename(datos1,
"fecha" = "mes/año"
)
datos1 <- datos1 %>%
rename(
"fecha" = "mes/año"
)
datos1 <- datos1 %>%
rename(
"mes/año"="fecha"
)
View(datos1)
library(readxl)
library(stargazer)
library(dplyr)
library(tidyr)
datos1 <- read_xlsx("tipo de cambio.xlsx", col_names = TRUE, sheet = 1)
modelo_r <- lm(TC ~ TBP + IMAE, datos1)
stargazer(modelo_r, type='text')
SRC_r<-sum((modelo_r$residuals^{2}))
datos1 <- datos1 %>%
rename(
"mes/año"="fecha"
)
datos1 <- datos1 %>%
rename(
"fecha"="mes/año"
)
View(datos1)
datos1$fecha <- as.Date(datos1$fecha, tryFormats=c("%d/%m/%Y") )
View(datos1)
class(datos1$fecha)
library(lubridate)
datos1$fecha <- ymd(datos1$fecha)
View(datos1)
datos1 <- datos1 %>%
mutate(
fecha=ymd(`fecha`)
)
View(datos1)
rm(list = ls())
modelo_r <- lm(TC ~ TBP + IMAE, datos1)
datos1 <- read_xlsx("tipo de cambio.xlsx", col_names = TRUE, sheet = 1)
modelo_r <- lm(TC ~ TBP + IMAE, datos1)
stargazer(modelo_r, type='text')
SRC_r<-sum((modelo_r$residuals^{2}))
datos1 <- datos1 %>%
rename(
"fecha"="mes/año"
)
datos1 <- datos1 %>%
mutate(
fecha=ymd(`fecha`)
)
View(datos1)
View(datos1)
rm(list = ls())
datos1 <- read_xlsx("tipo de cambio.xlsx", col_names = TRUE, sheet = 1)
modelo_r <- lm(TC ~ TBP + IMAE, datos1)
stargazer(modelo_r, type='text')
SRC_r<-sum((modelo_r$residuals^{2}))
datos1 <- datos1 %>%
rename(
"fecha"="mes/año"
)
View(datos1)
modelo_chow2<-lm(TC ~ TBP + IMAEV, datos1[1:178,])
modelo_chow2<-lm(TC ~ TBP + IMAE, datos1[1:178,])
SRC_modelo_chow2<-sum((modelo_chow2$residuals^{2}))
modelo_chow3<-lm(TC ~ TBP + IMAE, datos1[179:length(datos1$fecha),])
SRC_modelo_chow3<-sum((modelo_chow3$residuals^{2}))
SRC_modelos_chow23<-SRC_modelo_chow2+SRC_modelo_chow3
estadistico_F<- ((SRC_r-SRC_modelos_chow23)/3)/(SRC_modelos_chow23/(nrow(datos1)-(2*3)))
nrow(datos1)-(2*3)
tabular_F <- qf(0.95,3,261)
p_value<-pf(estadistico_F,3,(nrow(datos1)-(2*3)), lower.tail = FALSE)
require(strucchange)
install.packages("strucchange")
library(strucchange)
sctest(TC ~ TBP + IMAE, data = datos1, type = "Chow", point = 178)
setwd('/Users/axelcanales/Documents/GitHub/govsize_2023')
install.packages("googlesheets4")
install.packages("timeSeries")
install.packages("zoo")
install.packages("xts")
install.packages("seasonal")
install.packages("TSstudio")
install.packages("ggpubr")
install.packages("patchwork")
install.packages("tidyverse")
install.packages("fpp2")
install.packages("googlesheets4")
install.packages("timeSeries")
install.packages("zoo")
install.packages("xts")
install.packages("seasonal")
install.packages("TSstudio")
install.packages("ggpubr")
install.packages("patchwork")
install.packages("urca")
install.packages("cointReg")
install.packages("xtable")
install.packages("aTSA")
install.packages("broom")
install.packages("googlesheets4")
install.packages("TSstudio")
install.packages("ggpubr")
install.packages("patchwork")
install.packages("tidyverse")
install.packages("googlesheets4")
install.packages("zoo")
install.packages("TSstudio")
install.packages("ggpubr")
install.packages("patchwork")
install.packages("urca")
install.packages("cointReg")
install.packages("xtable")
install.packages("googlesheets4")
install.packages("TSstudio")
install.packages("ggpubr")
install.packages("urca")
install.packages("cointReg")
install.packages("xtable")
install.packages("TSstudio")
install.packages("ggpubr")
install.packages("cointReg")
install.packages("xtable")
install.packages("ggpubr")
install.packages("xtable")
install.packages("seasonal")
library(tidyverse)#manipulation de datos en general
library(xtable)#para tablas de latex
library(cointReg)#para FMOLS
library(urca)#para test de Johansen
library(dplyr)#manipulacion de datos en general
library(googlesheets4)#para importar de G. Drive
library(TSstudio)
library(patchwork)#para combinar graficos en una imagen
library(zoo)#funciones de series de tiempo
library(seasonal)#Para desestacionalizar
library(TSstudio)#PAra desestacionalizar
library(ggpubr)
library(patchwork) # para combinar graficos
library(aTSA)
library(broom)
raw_data <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA",
col_names = TRUE,
range = "A1:H65"
)
raw_data <- raw_data %>%
rename(
"date" = "DATE",
"gdp" = "RAW_GDP",
"gov_con" = "RAW_GOV_CON",
"pub_inv" = "RAW_PUB_INV",
"priv_inv" = "RAW_PRIV_INV",
"x" = "RAW_X",
"m" = "RAW_M",
"pop" = "RAW_POP"
)
var_names_bcn <- c("date", "gdp", "gov_con", "pub_inv", "priv_inv", "x", "m", "pop")
raw_data <- raw_data %>%
mutate(
gdp = gdp*10^6,
gov_con =gov_con*10^6,
pub_inv= pub_inv*10^6,
priv_inv=priv_inv*10^6,
x=x*10^6,
m=m*10^6
)
raw_pop <- ggplot(raw_data, aes(x = as.Date(date), y = pop)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_pop
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag(pop)-1,0)
)
for (x in 62:64) {
raw_data[x,9] = (raw_data[x-1,9] +raw_data[x-2,9] +raw_data[x-3,9] +raw_data[x-4,9])/4
}
for (x in 28:1) {
raw_data[x,9] = (raw_data[x+1,9] +raw_data[x+2,9] +raw_data[x+3,9] +raw_data[x+4,9])/4
}
for (x in 26:1) {
raw_data[x, 8] = raw_data[x+1, 8]/(1+raw_data[x+1,9])
}
for (x in 62:64) {
raw_data[x,8] = raw_data[x-1,8]*(1+ raw_data[x,9])
}
tr_pop <- ggplot(raw_data, aes(x = as.Date(date), y = pop)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
tr_pop
View(raw_pop)
View(raw_data)
raw_data <- raw_data %>%
mutate(
gdp_pc = gdp/pop,
gov_gdp = (gov_con + pub_inv)/gdp,
gov_con_gdp = gov_con/gdp,
pub_inv_gdp= pub_inv/gdp,
priv_inv_gdp = priv_inv/gdp,
tr_op = (x+m)/gdp,
)
raw_data <- raw_data %>%
mutate(
growth_gdp_pc = gdp_pc/lag(gdp_pc)-1
)
View(raw_data)
raw_data <- raw_data %>%
mutate(
d_2008 = ifelse(date >= "2008-7-1" & date <= "2009-4-1" ,1,0)
)
raw_data <- raw_data %>%
mutate(
d_2018 = ifelse(date >= "2017-10-1",1,0)
)
ncol(raw_data)
#Time series set
ts_vars <- ts(data = raw_data[,10:ncol(raw_data)],
start = c(2006,1),
frequency = 4
)
df <- as.data.frame(raw_data)
df$date<-as.Date(df$date,  "%m/%d/%y")
raw_plot1 <- ggplot(df, aes(x = date, y = gdp_pc)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot2 <- ggplot(df, aes(x = date, y = df[,10])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot3 <- ggplot(df, aes(x = date, y = df[,11])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot4 <- ggplot(df, aes(x = date, y = df[,12])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot5 <- ggplot(df, aes(x = date, y = df[,13])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot6 <- ggplot(df, aes(x = date, y = df[,14])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
combined_plot <- ggarrange(raw_plot1,
raw_plot2,
raw_plot3,
raw_plot4,
raw_plot5,
raw_plot6,
nrow = 2,
ncol = 3) #nrow & ncol depend on how you want to #organize your plots
combined_plot
View(df)
raw_plot1 <- ggplot(df, aes(x = date, y = df$gdp_pc)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot2 <- ggplot(df, aes(x = date, y = df$gov_gdp)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot3 <- ggplot(df, aes(x = date, y = df$gov_con_gdp)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot4 <- ggplot(df, aes(x = date, y = df$pub_inv_gdp)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot5 <- ggplot(df, aes(x = date, y = df$priv_inv_gdp)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot6 <- ggplot(df, aes(x = date, y =  df$tr_op)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
combined_plot <- ggarrange(raw_plot1,
raw_plot2,
raw_plot3,
raw_plot4,
raw_plot5,
raw_plot6,
nrow = 2,
ncol = 3) #nrow & ncol depend on how you want to #organize your plots
combined_plot
seasonal_adj <- seas(x = ts_vars)
View(ts_vars)
seasonal_adj <- seas(x = ts_vars[,1:7])
#series(seasonal_adj,c("forecast.forecasts","s12"))
seasonal_adj <- final(seasonal_adj)
df_seas <- as.data.frame(seasonal_adj)
df_seas <- cbind(df$date, df_seas[,])
df_seas <- df_seas %>%
rename("date" = "df$date",
"gdp_pc_s"="gdp_pc",
"gov_gdp_s"="gov_gdp",
"gov_con_gdp_s"="gov_con_gdp",
"pub_inv_gdp_s"="pub_inv_gdp",
"priv_inv_gdp_s"="priv_inv_gdp",
"tr_op_s"="tr_op"
)
df_seas$date<-as.Date(df_seas$date,  "%m/%d/%y")
df_seas <- df_seas %>%
mutate(
log_gdp_pc_s= log(gdp_pc_s),
log_gov_gdp_s=log(gov_gdp_s),
log_gov_con_gdp_s=log(gov_con_gdp_s),
log_pub_inv_gdp_s=log(pub_inv_gdp_s),
log_priv_inv_gdp_s=log(priv_inv_gdp_s),
log_tr_op_s=log(tr_op_s)
)
seas_plot1 <- ggplot(df_seas, aes(x = date, y = df_seas[,2])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")+
theme_classic()+
ggtitle("Producto Interno Bruto Per Capita")+
labs(x="",y="")
seas_plot2 <- ggplot(df_seas, aes(x = date, y = df_seas[,3])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")+
theme_classic()+
ggtitle("Gasto de Gobierno agregado")+
labs(x="",y="")
seas_plot3 <- ggplot(df_seas, aes(x = date, y = df_seas[,4])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")+
theme_classic()+
ggtitle("Gasto de Gobierno corriente")+
labs(x="",y="")
seas_plot4 <- ggplot(df_seas, aes(x = date, y = df_seas[,5])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")+
theme_classic()+
ggtitle("Inverion fija publica")+
labs(x="",y="")
seas_plot5 <- ggplot(df_seas, aes(x = date, y = df_seas[,6])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")+
theme_classic()+
ggtitle("Inversion fija privada")+
labs(x="",y="")
seas_plot6 <- ggplot(df_seas, aes(x = date, y = df_seas[,7])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")+
theme_classic()+
ggtitle("Apertura comercial")+
labs(x="",y="")
combined_plot_seas <- ggarrange(seas_plot1,
seas_plot2,
seas_plot3,
seas_plot4,
seas_plot5,
seas_plot6,
nrow = 2,
ncol = 3) #nrow & ncol depend on how you want to #organize your plots
combined_plot_seas
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
}
View(variables)
View(save)
jotest=ca.jo(df_seas[,2:6], type="trace", K=2, ecdet="none", spec="longrun")
summary(jotest)
View(jotest)
jotest_table <- rbind.data.frame(c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
col.names)=
)
view(jotest_table)
jotest_table <- rbind.data.frame(c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
col.names)=
)
help(rbind.data.frame)
help(rbind)
jotest_table <- rbind.data.frame(c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba")
)
view(jotest_table)
View(jotest_table)
