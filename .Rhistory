range = "A1:H65"
)
raw_data <- raw_data %>%
rename(
"date" = "DATE",
"gdp" = "RAW_GDP",
"gov_con" = "RAW_GOV_CON",
"pub_inv" = "RAW_PUB_INV",
"priv_inv" = "RAW_PRIV_INV",
"x" = "RAW_X",
"m" = "RAW_M",
"pop" = "RAW_POP"
)
var_names_bcn <- c("date", "gdp", "gov_con", "pub_inv", "priv_inv", "x", "m", "pop")
raw_data <- raw_data %>%
mutate(
gdp = gdp*10^6,
gov_con =gov_con*10^6,
pub_inv= pub_inv*10^6,
priv_inv=priv_inv*10^6,
x=x*10^6,
m=m*10^6
)
raw_pop <- ggplot(raw_data, aes(x = as.Date(date), y = raw_data$pop)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_pop
View(raw_data)
library(forecast)
x <- ts(raw_data[30:64,8], frequency=4)
h <- 26
f <- 4
# Reverse time
revx <- ts(rev(x), frequency=f)
# Forecast
fc <- forecast(auto.arima(revx), h)
plot(fc)
####  Revertir tiempo de nuevo para volverlo a su valor original
fc$mean <- ts(rev(fc$mean),end=tsp(x)[1] - 1/f, frequency=f)
fc$upper <- fc$upper[h:1,]
fc$lower <- fc$lower[h:1,]
fc$x <- x
# Plot result
plot(fc, xlim=c(tsp(x)[1]-h/f, tsp(x)[2]))
library(forecast)
x <- ts(raw_data[40:64,8], frequency=4)
h <- 26
f <- 4
# Reverse time
revx <- ts(rev(x), frequency=f)
# Forecast
fc <- forecast(auto.arima(revx), h)
plot(fc)
####  Revertir tiempo de nuevo para volverlo a su valor original
fc$mean <- ts(rev(fc$mean),end=tsp(x)[1] - 1/f, frequency=f)
fc$upper <- fc$upper[h:1,]
fc$lower <- fc$lower[h:1,]
fc$x <- x
# Plot result
plot(fc, xlim=c(tsp(x)[1]-h/f, tsp(x)[2]))
x <- ts(raw_data[27:64,8], frequency=4)
h <- 27
f <- 4
# Reverse time
revx <- ts(rev(x), frequency=f)
# Forecast
fc <- forecast(auto.arima(revx), h)
plot(fc)
####  Revertir tiempo de nuevo para volverlo a su valor original
fc$mean <- ts(rev(fc$mean),end=tsp(x)[1] - 1/f, frequency=f)
fc$upper <- fc$upper[h:1,]
fc$lower <- fc$lower[h:1,]
fc$x <- x
# Plot result
plot(fc, xlim=c(tsp(x)[1]-h/f, tsp(x)[2]))
library(forecast)
x <- ts(raw_data[27:64,8], frequency=4)
h <- 28
f <- 4
# Reverse time
revx <- ts(rev(x), frequency=f)
# Forecast
fc <- forecast(auto.arima(revx), h)
plot(fc)
####  Revertir tiempo de nuevo para volverlo a su valor original
fc$mean <- ts(rev(fc$mean),end=tsp(x)[1] - 1/f, frequency=f)
fc$upper <- fc$upper[h:1,]
fc$lower <- fc$lower[h:1,]
fc$x <- x
# Plot result
plot(fc, xlim=c(tsp(x)[1]-h/f, tsp(x)[2]))
library(forecast)
x <- ts(raw_data[27:64,8], frequency=4)
h <- 30
f <- 4
# Reverse time
revx <- ts(rev(x), frequency=f)
# Forecast
fc <- forecast(auto.arima(revx), h)
plot(fc)
####  Revertir tiempo de nuevo para volverlo a su valor original
fc$mean <- ts(rev(fc$mean),end=tsp(x)[1] - 1/f, frequency=f)
fc$upper <- fc$upper[h:1,]
fc$lower <- fc$lower[h:1,]
fc$x <- x
# Plot result
plot(fc, xlim=c(tsp(x)[1]-h/f, tsp(x)[2]))
library(forecast)
x <- ts(raw_data[28:64,8], frequency=4)
h <- 30
f <- 4
# Reverse time
revx <- ts(rev(x), frequency=f)
# Forecast
fc <- forecast(auto.arima(revx), h)
plot(fc)
####  Revertir tiempo de nuevo para volverlo a su valor original
fc$mean <- ts(rev(fc$mean),end=tsp(x)[1] - 1/f, frequency=f)
fc$upper <- fc$upper[h:1,]
fc$lower <- fc$lower[h:1,]
fc$x <- x
# Plot result
plot(fc, xlim=c(tsp(x)[1]-h/f, tsp(x)[2]))
library(forecast)
x <- ts(raw_data[29:64,8], frequency=4)
h <- 30
f <- 4
# Reverse time
revx <- ts(rev(x), frequency=f)
# Forecast
fc <- forecast(auto.arima(revx), h)
plot(fc)
####  Revertir tiempo de nuevo para volverlo a su valor original
fc$mean <- ts(rev(fc$mean),end=tsp(x)[1] - 1/f, frequency=f)
fc$upper <- fc$upper[h:1,]
fc$lower <- fc$lower[h:1,]
fc$x <- x
# Plot result
plot(fc, xlim=c(tsp(x)[1]-h/f, tsp(x)[2]))
library(forecast)
x <- ts(raw_data[29:64,8], frequency=4)
h <- 31
f <- 4
# Reverse time
revx <- ts(rev(x), frequency=f)
# Forecast
fc <- forecast(auto.arima(revx), h)
plot(fc)
####  Revertir tiempo de nuevo para volverlo a su valor original
fc$mean <- ts(rev(fc$mean),end=tsp(x)[1] - 1/f, frequency=f)
fc$upper <- fc$upper[h:1,]
fc$lower <- fc$lower[h:1,]
fc$x <- x
# Plot result
plot(fc, xlim=c(tsp(x)[1]-h/f, tsp(x)[2]))
library(forecast)
x <- ts(raw_data[29:64,8], frequency=4)
h <- 32
f <- 4
# Reverse time
revx <- ts(rev(x), frequency=f)
# Forecast
fc <- forecast(auto.arima(revx), h)
plot(fc)
####  Revertir tiempo de nuevo para volverlo a su valor original
fc$mean <- ts(rev(fc$mean),end=tsp(x)[1] - 1/f, frequency=f)
fc$upper <- fc$upper[h:1,]
fc$lower <- fc$lower[h:1,]
fc$x <- x
# Plot result
plot(fc, xlim=c(tsp(x)[1]-h/f, tsp(x)[2]))
x <- ts(raw_data[27:64,8], frequency=4)
h <- 26
f <- 4
# Reverse time
revx <- ts(rev(x), frequency=f)
# Forecast
fc <- forecast(auto.arima(revx), h)
plot(fc)
####  Revertir tiempo de nuevo para volverlo a su valor original
fc$mean <- ts(rev(fc$mean),end=tsp(x)[1] - 1/f, frequency=f)
fc$upper <- fc$upper[h:1,]
fc$lower <- fc$lower[h:1,]
fc$x <- x
# Plot result
plot(fc, xlim=c(tsp(x)[1]-h/f, tsp(x)[2]))
library(forecast)
x <- ts(raw_data[27:64,8], frequency=4)
h <- 27
f <- 4
# Reverse time
revx <- ts(rev(x), frequency=f)
# Forecast
fc <- forecast(auto.arima(revx), h)
plot(fc)
####  Revertir tiempo de nuevo para volverlo a su valor original
fc$mean <- ts(rev(fc$mean),end=tsp(x)[1] - 1/f, frequency=f)
fc$upper <- fc$upper[h:1,]
fc$lower <- fc$lower[h:1,]
fc$x <- x
# Plot result
plot(fc, xlim=c(tsp(x)[1]-h/f, tsp(x)[2]))
raw_pop <- ggplot(raw_data, aes(x = as.Date(date), y = raw_data$pop)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_pop
library(tidyverse)
library(xtable)#para tablas de latex
library(cointReg)#para FMOLS
library(urca)#para test de Johansen
library(dplyr)
library(googlesheets4)#para importar de G. Drive
library(lubridate)
library(seasonal)
library(TSstudio)
library(patchwork)
library(zoo)
library(seasonal)#Para desestacionalizar
library(TSstudio)#PAra desestacionalizar
library(ggpubr)
library(patchwork) # para combinar graficos
raw_data <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA",
col_names = TRUE,
range = "A1:H65"
)
#Data cleaning (Euler)
#rename
raw_data <- raw_data %>%
rename(
"date" = "DATE",
"gdp" = "RAW_GDP",
"gov_con" = "RAW_GOV_CON",
"pub_inv" = "RAW_PUB_INV",
"priv_inv" = "RAW_PRIV_INV",
"x" = "RAW_X",
"m" = "RAW_M",
"pop" = "RAW_POP"
)
var_names_bcn <- c("date", "gdp", "gov_con", "pub_inv", "priv_inv", "x", "m", "pop")
#Rescale variables from BCN to millions of cords
raw_data <- raw_data %>%
mutate(
gdp = gdp*10^6,
gov_con =gov_con*10^6,
pub_inv= pub_inv*10^6,
priv_inv=priv_inv*10^6,
x=x*10^6,
m=m*10^6
)
raw_pop <- ggplot(raw_data, aes(x = as.Date(date), y = raw_data$pop)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_pop
raw_data <- raw_data %>%
mutate(
lag_pop = lag(pop, n=1),
growth_pop = ifelse(date>= "2012-10-01" & date<= "2-04-01"  , pop/lag_pop-1, 0)
)
View(raw_data)
raw_data <- raw_data %>%
mutate(
lag_pop = lag(pop, n=1),
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag_pop-1, 0)
)
View(raw_data)
raw_data <- raw_data %>%
mutate(
lag_1_pop = lag(pop, n=1),
lag_2_pop = lag(pop, n=2),
lag_3_pop = lag(pop, n=3),
lag_4_pop = lag(pop, n=4),
lead_1_pop = lead(pop, n=1),
lead_2_pop = lead(pop, n=2),
lead_3_pop = lead(pop, n=3),
lead_4_pop = lead(pop, n=4),
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag_pop-1,
ifelse(date<= "2012-10-01",mean(lead_1_pop,lead_2_pop,lead_3_pop,lead_4_pop, mean(lag_1_pop, lag_2_pop, lag_3_pop,lag_4_pop))))
)
View(raw_data)
raw_data <- raw_data %>%
mutate(
lag_1_pop = lag(pop, n=1),
lag_2_pop = lag(pop, n=2),
lag_3_pop = lag(pop, n=3),
lag_4_pop = lag(pop, n=4),
lead_1_pop = lead(pop, n=1),
lead_2_pop = lead(pop, n=2),
lead_3_pop = lead(pop, n=3),
lead_4_pop = lead(pop, n=4)
)
View(raw_data)
help(mean)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag_pop-1,
ifelse(date<= "2012-10-01", (lead_1_pop+lead_2_pop+lead_3_pop+lead_4_pop)/4, (lag_1_pop+lag_2_pop+lag_3_pop+lag_4_pop)/4))
)
View(raw_data)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag_pop-1,0)
)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date<="2012-10-01"  , (lead_1_pop+lead_2_pop+lead_3_pop+lead_4_pop)/4, growth_pop)
)
View(raw_data)
mutate(
lag_1_pop = lead(lag(pop, n=1),n=2),
lag_2_pop = lead(lag(pop, n=2), n=3),
lag_3_pop = lead(lag(pop, n=3), n=4),
lag_4_pop = lead(lag(pop, n=4), n=5),
lead_1_pop = lead(pop, n=1),
lead_2_pop = lead(pop, n=2),
lead_3_pop = lead(pop, n=3),
lead_4_pop = lead(pop, n=4)
)
raw_data <- raw_data %>%
mutate(
lag_1_pop = lead(lag(pop, n=1),n=2),
lag_2_pop = lead(lag(pop, n=2), n=3),
lag_3_pop = lead(lag(pop, n=3), n=4),
lag_4_pop = lead(lag(pop, n=4), n=5),
lead_1_pop = lead(pop, n=1),
lead_2_pop = lead(pop, n=2),
lead_3_pop = lead(pop, n=3),
lead_4_pop = lead(pop, n=4)
)
View(raw_data)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag_pop-1,0)
)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date>="2021-04-01"  , rollmean(growth_pop, k=4, fill=NA, align='right'), growth_pop)
)
View(raw_data)
na_ma(raw_data$pop, k=4,weighting = "simple")
View(raw_data)
na_ma(raw_data$pop, k=2,weighting = "simple")
View(raw_data)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date>="2021-04-01"  , rollmean(growth_pop, k=3, align='right'), growth_pop)
)
View(raw_data)
raw_data <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA",
col_names = TRUE,
range = "A1:H65"
)
raw_data <- raw_data %>%
rename(
"date" = "DATE",
"gdp" = "RAW_GDP",
"gov_con" = "RAW_GOV_CON",
"pub_inv" = "RAW_PUB_INV",
"priv_inv" = "RAW_PRIV_INV",
"x" = "RAW_X",
"m" = "RAW_M",
"pop" = "RAW_POP"
)
#Declare vector of names
var_names_bcn <- c("date", "gdp", "gov_con", "pub_inv", "priv_inv", "x", "m", "pop")
raw_data <- raw_data %>%
mutate(
gdp = gdp*10^6,
gov_con =gov_con*10^6,
pub_inv= pub_inv*10^6,
priv_inv=priv_inv*10^6,
x=x*10^6,
m=m*10^6
)
### Grafica de la serie poblacion
raw_pop <- ggplot(raw_data, aes(x = as.Date(date), y = pop)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_pop
View(raw_data)
raw_data <- raw_data %>%
mutate(
lag_1_pop = lag(pop, n=1),
lag_2_pop = lag(pop, n=2),
lag_3_pop = lag(pop, n=3),
lag_4_pop = lag(pop, n=4),
lead_1_pop = lead(pop, n=1),
lead_2_pop = lead(pop, n=2),
lead_3_pop = lead(pop, n=3),
lead_4_pop = lead(pop, n=4)
)
View(raw_data)
raw_data <- raw_data %>%
mutate(
lag_1_pop = lead(lag(pop, n=1), n=1),
lag_2_pop = lead(lag(pop, n=2), n=2),
lag_3_pop = lead(lag(pop, n=3), n=3),
lag_4_pop = lead(lag(pop, n=4), n=4),
lead_1_pop = lag(lead(pop, n=1), n=1),
lead_2_pop = lag(lead(pop, n=2), n=2),
lead_3_pop = lag(lead(pop, n=3), n=3),
lead_4_pop = lag(lead(pop, n=4), n=4)
)
raw_
View(raw_data)
raw_data <- raw_data %>%
mutate(
lag_1_pop = lead(lag(pop, n=1),
lag_2_pop = lag(pop, n=2),
lag_3_pop = lag(pop, n=3),
lag_4_pop = lag(pop, n=4),
lead_1_pop = lead(pop, n=1),
lead_2_pop = lead(pop, n=2),
lead_3_pop = lead(pop, n=3),
lead_4_pop = lead(pop, n=4)
)
View(raw_data)
View(raw_data)
raw_data <- raw_data %>%
mutate(
lag_1_pop = lag(pop, n=1),
lag_2_pop = lag(pop, n=2),
lag_3_pop = lag(pop, n=3),
lag_4_pop = lag(pop, n=4),
lead_1_pop = lead(pop, n=1),
lead_2_pop = lead(pop, n=2),
lead_3_pop = lead(pop, n=3),
lead_4_pop = lead(pop, n=4)
)
View(raw_data)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag_1_pop-1,0)
)
View(raw_data)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-07-01" & date<= "2021-04-01"  , pop/lag_1_pop-1,0)
)
View(raw_data)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag_1_pop-1,0)
)
View(raw_data)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2021-01-01", (lag_1_pop+lag_2_pop+lag_3_pop+lag_4_pop)/4,0)
)
View(raw_data)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag_1_pop-1,0)
)
View(raw_data)
raw_data$growth_pop[63]
raw_data$growth_pop[62]
raw_data$growth_pop[34]
for (x in 63:64) {
raw_data <- raw_data %>%
mutate(
growth_pop[x] = (growth_pop[x-1]+growth_pop[x-2]+growth_pop[x-3]+growth_pop[x-4])/4
raw_data <- raw_data %>%
mutate(
for (x in 63:64) {
growth_pop[x] = (growth_pop[x-1]+growth_pop[x-2]+growth_pop[x-3]+growth_pop[x-4])/4
}
)
View(raw_data)
raw_data <- raw_data %>%
mutate(
for (x in 62:64) {
growth_pop[x] = (growth_pop[x-1]+growth_pop[x-2]+growth_pop[x-3]+growth_pop[x-4])/4
}
)
View(raw_data)
raw_data <- raw_data %>%
mutate(
for (x in 62:64) {
growth_pop['x'] = (growth_pop['x'-1]+growth_pop['x'-2]+growth_pop['x'-3]+growth_pop['x'-4])/4
}
)
for (x in 62:64) {
growth_pop[x] = (growth_pop[x-1]+growth_pop[x-2]+growth_pop[x-3]+growth_pop[x-4])/4
}
for (x in 62:64) {
+     data_raw$growth_pop[x] = (data_raw$growth_pop[x-1]+data_raw$growth_pop[x-2]+data_raw$growth_pop[x-3]+data_raw$growth_pop[x-4])/4
+ }
View(raw_data)
for (x in 62:64) {
data_raw[x,17] = (data_raw[x-1,17] +data_raw[x-2,17] +data_raw[x-3,17] +data_raw[x-4,17])/4
}
for (x in 62:64) {
raw_data[x,17] = (raw_data[x-1,17] +raw_data[x-2,17] +raw_data[x-3,17] +raw_data[x-4,17])/4
}
View(raw_data)
for (x in 28:1) {
raw_data[x,17] = (raw_data[x+1,17] +raw_data[x+2,17] +raw_data[x+3,17] +raw_data[x+4,17])/4
}
View(raw_data)
for (x in 26:1) {
raw_data[x, 8] = raw_data[x+1, 8]/(1+raw_data[x+1,17])
}
for (x in 62:64) {
raw_data[x,8] = raw_data[x-1,8]*(1+ raw_data[x,17])
}
View(raw_data)
raw_pop <- ggplot(raw_data, aes(x = as.Date(date), y = pop)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_pop
