require(strucchange)
install.packages("strucchange")
library(strucchange)
sctest(TC ~ TBP + IMAE, data = datos1, type = "Chow", point = 178)
setwd('/Users/axelcanales/Documents/GitHub/govsize_2023')
install.packages("googlesheets4")
install.packages("timeSeries")
install.packages("zoo")
install.packages("xts")
install.packages("seasonal")
install.packages("TSstudio")
install.packages("ggpubr")
install.packages("patchwork")
install.packages("tidyverse")
install.packages("fpp2")
install.packages("googlesheets4")
install.packages("timeSeries")
install.packages("zoo")
install.packages("xts")
install.packages("seasonal")
install.packages("TSstudio")
install.packages("ggpubr")
install.packages("patchwork")
install.packages("urca")
install.packages("cointReg")
install.packages("xtable")
install.packages("aTSA")
install.packages("broom")
install.packages("googlesheets4")
install.packages("TSstudio")
install.packages("ggpubr")
install.packages("patchwork")
install.packages("tidyverse")
install.packages("googlesheets4")
install.packages("zoo")
install.packages("TSstudio")
install.packages("ggpubr")
install.packages("patchwork")
install.packages("urca")
install.packages("cointReg")
install.packages("xtable")
install.packages("googlesheets4")
install.packages("TSstudio")
install.packages("ggpubr")
install.packages("urca")
install.packages("cointReg")
install.packages("xtable")
install.packages("TSstudio")
install.packages("ggpubr")
install.packages("cointReg")
install.packages("xtable")
install.packages("ggpubr")
install.packages("xtable")
install.packages("seasonal")
library(tidyverse)#manipulation de datos en general
library(xtable)#para tablas de latex
library(cointReg)#para FMOLS
library(urca)#para test de Johansen
library(dplyr)#manipulacion de datos en general
library(googlesheets4)#para importar de G. Drive
library(TSstudio)
library(patchwork)#para combinar graficos en una imagen
library(zoo)#funciones de series de tiempo
library(seasonal)#Para desestacionalizar
library(TSstudio)#PAra desestacionalizar
library(ggpubr)
library(patchwork) # para combinar graficos
library(aTSA)
library(broom)
raw_data <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA",
col_names = TRUE,
range = "A1:H65"
)
raw_data <- raw_data %>%
rename(
"date" = "DATE",
"gdp" = "RAW_GDP",
"gov_con" = "RAW_GOV_CON",
"pub_inv" = "RAW_PUB_INV",
"priv_inv" = "RAW_PRIV_INV",
"x" = "RAW_X",
"m" = "RAW_M",
"pop" = "RAW_POP"
)
var_names_bcn <- c("date", "gdp", "gov_con", "pub_inv", "priv_inv", "x", "m", "pop")
raw_data <- raw_data %>%
mutate(
gdp = gdp*10^6,
gov_con =gov_con*10^6,
pub_inv= pub_inv*10^6,
priv_inv=priv_inv*10^6,
x=x*10^6,
m=m*10^6
)
raw_pop <- ggplot(raw_data, aes(x = as.Date(date), y = pop)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_pop
=======
### Debido a cambio estructural en la serie de poblacion, se procedio a reescalar la serie.
#Para reflejar la tendencia reflejada a partir de 2013, es restar al cambio porcentual de la serie
#punto de quiebre, la tasa de crecimiento trimestral de los datos previo al quiebre en el trimestre
# correspondiente.
>>>>>>> 638d6ffb7b4f6e832502123d3b3cb9d002259e15
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag(pop)-1,0)
)
for (x in 62:64) {
raw_data[x,9] = (raw_data[x-1,9] +raw_data[x-2,9] +raw_data[x-3,9] +raw_data[x-4,9])/4
}
for (x in 28:1) {
raw_data[x,9] = (raw_data[x+1,9] +raw_data[x+2,9] +raw_data[x+3,9] +raw_data[x+4,9])/4
}
for (x in 26:1) {
raw_data[x, 8] = raw_data[x+1, 8]/(1+raw_data[x+1,9])
}
for (x in 62:64) {
raw_data[x,8] = raw_data[x-1,8]*(1+ raw_data[x,9])
}
<<<<<<< HEAD
=======
##Grafico de poblacion reescalada
>>>>>>> 638d6ffb7b4f6e832502123d3b3cb9d002259e15
tr_pop <- ggplot(raw_data, aes(x = as.Date(date), y = pop)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
tr_pop
<<<<<<< HEAD
View(raw_pop)
View(raw_data)
=======
#Variables as share of PIB per capita
>>>>>>> 638d6ffb7b4f6e832502123d3b3cb9d002259e15
raw_data <- raw_data %>%
mutate(
gdp_pc = gdp/pop,
gov_gdp = (gov_con + pub_inv)/gdp,
gov_con_gdp = gov_con/gdp,
pub_inv_gdp= pub_inv/gdp,
priv_inv_gdp = priv_inv/gdp,
tr_op = (x+m)/gdp,
)
<<<<<<< HEAD
raw_data <- raw_data %>%
mutate(
growth_gdp_pc = gdp_pc/lag(gdp_pc)-1
)
View(raw_data)
=======
#create dummies
>>>>>>> 638d6ffb7b4f6e832502123d3b3cb9d002259e15
raw_data <- raw_data %>%
mutate(
d_2008 = ifelse(date >= "2008-7-1" & date <= "2009-4-1" ,1,0)
)
raw_data <- raw_data %>%
mutate(
d_2018 = ifelse(date >= "2017-10-1",1,0)
)
<<<<<<< HEAD
ncol(raw_data)
#Time series set
ts_vars <- ts(data = raw_data[,10:ncol(raw_data)],
=======
#Time series set
ts_vars <- ts(data = raw_data[,10:15],
>>>>>>> 638d6ffb7b4f6e832502123d3b3cb9d002259e15
start = c(2006,1),
frequency = 4
)
df <- as.data.frame(raw_data)
df$date<-as.Date(df$date,  "%m/%d/%y")
raw_plot1 <- ggplot(df, aes(x = date, y = gdp_pc)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot2 <- ggplot(df, aes(x = date, y = df[,10])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot3 <- ggplot(df, aes(x = date, y = df[,11])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot4 <- ggplot(df, aes(x = date, y = df[,12])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot5 <- ggplot(df, aes(x = date, y = df[,13])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot6 <- ggplot(df, aes(x = date, y = df[,14])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
combined_plot <- ggarrange(raw_plot1,
raw_plot2,
raw_plot3,
raw_plot4,
raw_plot5,
raw_plot6,
nrow = 2,
ncol = 3) #nrow & ncol depend on how you want to #organize your plots
combined_plot
<<<<<<< HEAD
View(df)
raw_plot1 <- ggplot(df, aes(x = date, y = df$gdp_pc)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot2 <- ggplot(df, aes(x = date, y = df$gov_gdp)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot3 <- ggplot(df, aes(x = date, y = df$gov_con_gdp)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot4 <- ggplot(df, aes(x = date, y = df$pub_inv_gdp)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot5 <- ggplot(df, aes(x = date, y = df$priv_inv_gdp)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot6 <- ggplot(df, aes(x = date, y =  df$tr_op)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
combined_plot <- ggarrange(raw_plot1,
raw_plot2,
raw_plot3,
raw_plot4,
raw_plot5,
raw_plot6,
nrow = 2,
ncol = 3) #nrow & ncol depend on how you want to #organize your plots
combined_plot
seasonal_adj <- seas(x = ts_vars)
View(ts_vars)
seasonal_adj <- seas(x = ts_vars[,1:7])
#series(seasonal_adj,c("forecast.forecasts","s12"))
seasonal_adj <- final(seasonal_adj)
=======
#Desestacionalizacion (Done)
seasonal_adj <- seas(x = ts_vars)
#series(seasonal_adj,c("forecast.forecasts","s12"))
seasonal_adj <- final(seasonal_adj)
#ggplot_graph
>>>>>>> 638d6ffb7b4f6e832502123d3b3cb9d002259e15
df_seas <- as.data.frame(seasonal_adj)
df_seas <- cbind(df$date, df_seas[,])
df_seas <- df_seas %>%
rename("date" = "df$date",
"gdp_pc_s"="gdp_pc",
"gov_gdp_s"="gov_gdp",
"gov_con_gdp_s"="gov_con_gdp",
"pub_inv_gdp_s"="pub_inv_gdp",
"priv_inv_gdp_s"="priv_inv_gdp",
"tr_op_s"="tr_op"
)
df_seas$date<-as.Date(df_seas$date,  "%m/%d/%y")
<<<<<<< HEAD
=======
#Log tranasformation
>>>>>>> 638d6ffb7b4f6e832502123d3b3cb9d002259e15
df_seas <- df_seas %>%
mutate(
log_gdp_pc_s= log(gdp_pc_s),
log_gov_gdp_s=log(gov_gdp_s),
log_gov_con_gdp_s=log(gov_con_gdp_s),
log_pub_inv_gdp_s=log(pub_inv_gdp_s),
log_priv_inv_gdp_s=log(priv_inv_gdp_s),
log_tr_op_s=log(tr_op_s)
)
<<<<<<< HEAD
seas_plot1 <- ggplot(df_seas, aes(x = date, y = df_seas[,2])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")+
theme_classic()+
ggtitle("Producto Interno Bruto Per Capita")+
labs(x="",y="")
seas_plot2 <- ggplot(df_seas, aes(x = date, y = df_seas[,3])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")+
theme_classic()+
ggtitle("Gasto de Gobierno agregado")+
labs(x="",y="")
seas_plot3 <- ggplot(df_seas, aes(x = date, y = df_seas[,4])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")+
theme_classic()+
ggtitle("Gasto de Gobierno corriente")+
labs(x="",y="")
seas_plot4 <- ggplot(df_seas, aes(x = date, y = df_seas[,5])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")+
theme_classic()+
ggtitle("Inverion fija publica")+
labs(x="",y="")
seas_plot5 <- ggplot(df_seas, aes(x = date, y = df_seas[,6])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")+
theme_classic()+
ggtitle("Inversion fija privada")+
labs(x="",y="")
seas_plot6 <- ggplot(df_seas, aes(x = date, y = df_seas[,7])) +
geom_line() +
scale_x_date(date_labels = "%b %Y")+
theme_classic()+
ggtitle("Apertura comercial")+
labs(x="",y="")
combined_plot_seas <- ggarrange(seas_plot1,
seas_plot2,
seas_plot3,
seas_plot4,
seas_plot5,
seas_plot6,
nrow = 2,
ncol = 3) #nrow & ncol depend on how you want to #organize your plots
combined_plot_seas
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
}
View(variables)
View(save)
jotest=ca.jo(df_seas[,2:6], type="trace", K=2, ecdet="none", spec="longrun")
summary(jotest)
View(jotest)
jotest_table <- rbind.data.frame(c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
col.names)=
)
view(jotest_table)
jotest_table <- rbind.data.frame(c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
col.names)=
)
help(rbind.data.frame)
help(rbind)
jotest_table <- rbind.data.frame(c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba"),
c("Variable", "Tipo de prueba")
)
view(jotest_table)
View(jotest_table)
=======
variables <- df_seas[,8:13] #Crea un dataframe con variables desestacionalizadas y en logaritmos
save <- list() #Genera una lista para guardar los resultados de los test de raiz unitaria
for (i in 1:ncol(variables)) { #Es un loop
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
}
save[[1]]
variables_diff <- apply(variables, 2, diff)
variables_diff <- apply(variables, 2, diff)
save_diff <- list() #Genera una lista para guardar los resultados de los test de raiz unitaria
for (i in 1:ncol(variables_diff)) { #Es un loop para realizar el test PP a cada variable guardada en save
col <- variables_diff[,i]
save_diff[[i]] <- tidy(pp.test(col))
}
save_diff[[1]]
variables_diff <- apply(variables, 2, diff)
save_diff <- list() #Genera una lista para guardar los resultados de los test de raiz unitaria
for (i in 1:ncol(variables_diff)) { #Es un loop para realizar el test PP a cada variable guardada en save
col <- variables_diff[,i]
save_diff[[i,]] <- tidy(pp.test(col))
}
tidy(pp.test(col))
names(save) <- colnames(variables)
save$log_gdp_pc_s
save$log_gdp_pc_s[,"p.value"]
pp.test(col)
tidy(pp.test(col))
names(save_diff) <- colnames(variables)
variables_diff <- apply(variables, 2, diff)
save_diff <- list() #Genera una lista para guardar los resultados de los test de raiz unitaria
for (i in 1:ncol(variables_diff)) { #Es un loop para realizar el test PP a cada variable guardada en save
col <- variables_diff[,i]
save_diff[[i]] <- tidy(pp.test(col))
}
View(save_diff)
as.dataframe(save[[1]])
as.data.frame.list(save[[1]])
class(as.data.frame.list(save[[1]]))
mati <- as.data.frame.list(save[[1]])
View(mati)
save <- list() #Genera una lista para guardar los resultados de los test de raiz unitaria
for (i in 1:ncol(variables)) { #Es un loop para realizar el test PP a cada variable guardada en save
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
mati_i <- as.data.frame.list(save[[i]])
}
View(mati_i)
View(variables)
u_root <- data.frame(matrix(NA,
nrow = 6,
ncol = 6))
View(u_root)
mati_i <- as.data.frame.list(save[[1]])[3,3]
as.data.frame.list(save[[1]])[3,3]
View(u_root)
as.data.frame.list(save[[1]])
u_root[1,1] <- as.data.frame.list(save[[1]])[1,3]
u_root[1,2] <- as.data.frame.list(save[[1]])[2,3]
u_root[1,3] <- as.data.frame.list(save[[1]])[3,3]
# GOV_GDP: Nivel con tres especificaciones
u_root[2,1] <- as.data.frame.list(save[[2]])[1,3]
u_root[2,2] <- as.data.frame.list(save[[2]])[2,3]
u_root[2,3] <- as.data.frame.list(save[[2]])[3,3]
# Consumo_GDP: Nivel con tres especificaciones
u_root[3,1] <- as.data.frame.list(save[[3]])[1,3]
u_root[3,2] <- as.data.frame.list(save[[3]])[2,3]
u_root[3,3] <- as.data.frame.list(save[[3]])[3,3]
# inv_publica: Nivel con tres especificaciones
u_root[4,1] <- as.data.frame.list(save[[4]])[1,3]
u_root[4,2] <- as.data.frame.list(save[[4]])[2,3]
u_root[4,3] <- as.data.frame.list(save[[4]])[3,3]
# inv_privada: Nivel con tres especificaciones
u_root[5,1] <- as.data.frame.list(save[[5]])[1,3]
u_root[5,2] <- as.data.frame.list(save[[5]])[2,3]
u_root[5,3] <- as.data.frame.list(save[[5]])[3,3]
# apertura_comercial: Nivel con tres especificaciones
u_root[6,1] <- as.data.frame.list(save[[6]])[1,3]
u_root[6,2] <- as.data.frame.list(save[[6]])[2,3]
u_root[6,3] <- as.data.frame.list(save[[6]])[3,3]
View(u_root)
u_root[2,2] <- round(as.data.frame.list(save[[2]])[2,3], digit = 2)
View(u_root)
# GDP_PC: Nivel con tres especificaciones
u_root[1,1] <- as.data.frame.list(save[[1]])[1,3]
u_root[1,2] <- as.data.frame.list(save[[1]])[2,3]
u_root[1,3] <- as.data.frame.list(save[[1]])[3,3]
# GOV_GDP: Nivel con tres especificaciones
u_root[2,1] <- as.data.frame.list(save[[2]])[1,3]
u_root[2,2] <- as.data.frame.list(save[[2]])[2,3]
u_root[2,3] <- as.data.frame.list(save[[2]])[3,3]
# Consumo_GDP: Nivel con tres especificaciones
u_root[3,1] <- as.data.frame.list(save[[3]])[1,3]
u_root[3,2] <- as.data.frame.list(save[[3]])[2,3]
u_root[3,3] <- as.data.frame.list(save[[3]])[3,3]
# inv_publica: Nivel con tres especificaciones
u_root[4,1] <- as.data.frame.list(save[[4]])[1,3]
u_root[4,2] <- as.data.frame.list(save[[4]])[2,3]
u_root[4,3] <- as.data.frame.list(save[[4]])[3,3]
# inv_privada: Nivel con tres especificaciones
u_root[5,1] <- as.data.frame.list(save[[5]])[1,3]
u_root[5,2] <- as.data.frame.list(save[[5]])[2,3]
u_root[5,3] <- as.data.frame.list(save[[5]])[3,3]
# apertura_comercial: Nivel con tres especificaciones
u_root[6,1] <- as.data.frame.list(save[[6]])[1,3]
u_root[6,2] <- as.data.frame.list(save[[6]])[2,3]
u_root[6,3] <- as.data.frame.list(save[[6]])[3,3]
#Variables en diferencias
# GDP_PC: Nivel con tres especificaciones
u_root[1,4] <- as.data.frame.list(save_diff[[1]])[1,3]
u_root[1,5] <- as.data.frame.list(save_diff[[1]])[2,3]
u_root[1,6] <- as.data.frame.list(save_diff[[1]])[3,3]
# GOV_GDP: Nivel con tres especificaciones
u_root[2,4] <- as.data.frame.list(save_diff[[2]])[1,3]
u_root[2,5] <- as.data.frame.list(save_diff[[2]])[2,3]
u_root[2,6] <- as.data.frame.list(save_diff[[2]])[3,3]
# Consumo_GDP: Nivel con tres especificaciones
u_root[3,4] <- as.data.frame.list(save_diff[[3]])[1,3]
u_root[3,5] <- as.data.frame.list(save_diff[[3]])[2,3]
u_root[3,6] <- as.data.frame.list(save_diff[[3]])[3,3]
# inv_publica: Nivel con tres especificaciones
u_root[4,4] <- as.data.frame.list(save_diff[[4]])[1,3]
u_root[4,5] <- as.data.frame.list(save_diff[[4]])[2,3]
u_root[4,6] <- as.data.frame.list(save_diff[[4]])[3,3]
# inv_privada: Nivel con tres especificaciones
u_root[5,4] <- as.data.frame.list(save_diff[[5]])[1,3]
u_root[5,5] <- as.data.frame.list(save_diff[[5]])[2,3]
u_root[5,6] <- as.data.frame.list(save_diff[[5]])[3,3]
# apertura_comercial: Nivel con tres especificaciones
u_root[6,4] <- as.data.frame.list(save_diff[[6]])[1,3]
u_root[6,5] <- as.data.frame.list(save_diff[[6]])[2,3]
u_root[6,6] <- as.data.frame.list(save_diff[[6]])[3,3]
View(u_root)
View(save_diff)
save_diff[[1]][["x"]]
u_root %>% mutate(across(is.numeric, round, digits=2)
View(u_root)
u_root %>%
mutate(across(is.numeric, round, digits=2)
View(u_root)
View(u_root)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
u_root %>%
mutate(across(is.numeric, round, digits=2)
u_root %>%
u_root %>%
mutate(across(is.numeric, round, digits=2))
u_root %>%
mutate(across(where(is.numeric), round, digits=2))
rownames(u_root) <- c("PIB per ́capita","Gasto de Gobierno Agregado","Gasto de Gobierno Corriente","Inversion fija publica","Inversion Fija Privada","Apertura Comercial")
u_root
colnames(u_root) <- c("Ninguno","Intercepto","Intercepto y tendencia","Ninguno","Intercepto","Intercepto y tendencia")
View(u_root)
print(xtable(u_root, type="latex"))
>>>>>>> 638d6ffb7b4f6e832502123d3b3cb9d002259e15
