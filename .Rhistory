grangertest(variables[,2],variables[,1], order = 1) #Gasto de Gobierno causa a PIB
grangertest(variables[,1],variables[,2], order = 1) #PIB causa a Gasto de Gobierno
}
for (i in 1:4) {
grangertest(variables[,2],variables[,1], order = i) #Gasto de Gobierno causa a PIB
grangertest(variables[,1],variables[,2], order = i) #PIB causa a Gasto de Gobierno
}
for (i in 1:4) {
granger_gov_pib_i <- grangertest(variables[,2],variables[,1], order = i) #Gasto de Gobierno causa a PIB
granger_pib_gov_i <- grangertest(variables[,1],variables[,2], order = i) #PIB causa a Gasto de Gobierno
}
View(granger_gov_pib_i)
View(granger_pib_gov_i)
grangertest(variables[,2],variables[,1], order = i)
grangertest(variables[,2],variables[,1], order = i)[2,3]
grangertest(variables[,2],variables[,1], order = i)[2,4]
for (i in 1:4) {
granger_gov_pib[[i]] <- grangertest(variables[,2],variables[,1], order = i) #Gasto de Gobierno causa a PIB
granger_pib_gov[[i]] <- grangertest(variables[,1],variables[,2], order = i) #PIB causa a Gasto de Gobierno
}
granger_gov_pib <- list()
granger_pib_gov <- list()
for (i in 1:4) {
granger_gov_pib[[i]] <- grangertest(variables[,2],variables[,1], order = i) #Gasto de Gobierno causa a PIB
granger_pib_gov[[i]] <- grangertest(variables[,1],variables[,2], order = i) #PIB causa a Gasto de Gobierno
}
View(granger_pib_gov)
View(granger_gov_pib)
View(granger_gov_pib_i)
View(granger_gov_pib)
granger_gov_pib[[i]]
granger_gov_pib[[2]]
granger_gov_pib[[3]]
granger_gov_pib[[3]][2,4]
granger_inv_pib <- list()
granger_pib_inv <- list()
for (i in 1:4) {
granger_inv_pib[[i]] <- grangertest(variables[,4],variables[,1], order = i) #Gasto de Gobierno causa a PIB
granger_pib_inv[[i]] <- grangertest(variables[,1],variables[,4], order = i) #PIB causa a Gasto de Gobierno
}
prueba_granger <- data.frame(matrix(NA, nrow = 4, ncol = 5))
View(prueba_granger)
prueba_granger[1,1] <- c("Gasto publico agregado no causa a PIB per capita")
View(prueba_granger)
prueba_granger <- data.frame(matrix(NA, nrow = 4, ncol = 5))
prueba_granger[1,1] <- c("Gasto publico agregado no causa a PIB per capita")
prueba_granger[2,1] <- c("PIB per capita no causa a Gasto publico agregado")
prueba_granger[3,1] <- c("Inversion fija publica no causa a PIB per capita")
prueba_granger[4,1] <- c("PIB per capita no causa a Inversion fija publica")
View(prueba_granger)
for (i in 1:4) {
prueba_granger[1,i] <- granger_gov_pib[[i]][2,4]
}
View(prueba_granger)
prueba_granger <- data.frame(matrix(NA, nrow = 4, ncol = 5))
prueba_granger[1,1] <- c("Gasto publico agregado no causa a PIB per capita")
prueba_granger[2,1] <- c("PIB per capita no causa a Gasto publico agregado")
prueba_granger[3,1] <- c("Inversion fija publica no causa a PIB per capita")
prueba_granger[4,1] <- c("PIB per capita no causa a Inversion fija publica")
for (i in 1:4) {
prueba_granger[1,i+1] <- granger_gov_pib[[i]][2,4]
}
View(prueba_granger)
for (i in 1:4) {
prueba_granger[1,i+1] <- granger_gov_pib[[i]][2,4]
prueba_granger[2,i+1] <- granger_pib_gov[[i]][2,4]
prueba_granger[3,i+1] <- granger_inv_pib[[i]][2,4]
prueba_granger[4,i+1] <- granger_gov_inv[[i]][2,4]
}
for (i in 1:4) {
prueba_granger[1,i+1] <- granger_gov_pib[[i]][2,4]
prueba_granger[2,i+1] <- granger_pib_gov[[i]][2,4]
prueba_granger[3,i+1] <- granger_inv_pib[[i]][2,4]
prueba_granger[4,i+1] <- granger_pib_inv[[i]][2,4]
}
View(prueba_granger)
granger_pib_gov[[1]][2,4]
granger_pib_gov[[1]]
prueba_granger <- data.frame(matrix(NA, nrow = 4, ncol = 5))
prueba_granger[1,1] <- c("Gasto publico agregado no causa a PIB per capita")
prueba_granger[2,1] <- c("PIB per capita no causa a Gasto publico agregado")
prueba_granger[3,1] <- c("Inversion fija publica no causa a PIB per capita")
prueba_granger[4,1] <- c("PIB per capita no causa a Inversion fija publica")
###Llenado del cuadro de test de procedencia de Granger
for (i in 1:4) {
prueba_granger[1,i+1] <- granger_gov_pib[[i]][2,4]
prueba_granger[2,i+1] <- granger_pib_gov[[i]][2,4]
prueba_granger[3,i+1] <- granger_inv_pib[[i]][2,4]
prueba_granger[4,i+1] <- granger_pib_inv[[i]][2,4]
}
## Creacion de titulos y subtitulos para exportar cuadro a latex
addtorow <- list()
addtorow$pos <- list(0)
addtorow$command <- c(" \\toprule
\\headrow & \\multicolumn{5}{c}{Numero de rezagos} \\\\
\\midrule
\\headrow Hipotesis Nula &
\\multicolumn{1}{c}{1} &
\\multicolumn{1}{c}{2} &
\\multicolumn{1}{c}{3} &
\\multicolumn{1}{c}{4} \\\\
\\bottomrule")
print(xtable(prueba_granger), add.to.row = addtorow, include.rownames = FALSE, include.colnames = FALSE )
library(xtable)
prueba_granger <- data.frame(matrix(NA, nrow = 4, ncol = 5))
prueba_granger[1,1] <- c("Gasto publico agregado no causa a PIB per capita")
prueba_granger[2,1] <- c("PIB per capita no causa a Gasto publico agregado")
prueba_granger[3,1] <- c("Inversion fija publica no causa a PIB per capita")
prueba_granger[4,1] <- c("PIB per capita no causa a Inversion fija publica")
###Llenado del cuadro de test de procedencia de Granger
for (i in 1:4) {
prueba_granger[1,i+1] <- granger_gov_pib[[i]][2,4]
prueba_granger[2,i+1] <- granger_pib_gov[[i]][2,4]
prueba_granger[3,i+1] <- granger_inv_pib[[i]][2,4]
prueba_granger[4,i+1] <- granger_pib_inv[[i]][2,4]
}
## Creacion de titulos y subtitulos para exportar cuadro a latex
addtorow <- list()
addtorow$pos <- list(0)
addtorow$command <- c(" \\toprule
\\headrow & \\multicolumn{5}{c}{Numero de rezagos} \\\\
\\midrule
\\headrow Hipotesis Nula &
\\multicolumn{1}{c}{1} &
\\multicolumn{1}{c}{2} &
\\multicolumn{1}{c}{3} &
\\multicolumn{1}{c}{4} \\\\
\\bottomrule")
print(xtable(prueba_granger), add.to.row = addtorow, include.rownames = FALSE, include.colnames = FALSE )
addtorow <- list()
addtorow$pos <- list(0)
addtorow$command <- c(" \\toprule
\\headrow & \\multicolumn{4}{c}{Numero de rezagos} \\\\
\\midrule
\\headrow Hipotesis Nula &
\\multicolumn{1}{c}{1} &
\\multicolumn{1}{c}{2} &
\\multicolumn{1}{c}{3} &
\\multicolumn{1}{c}{4} \\\\
\\bottomrule")
print(xtable(prueba_granger), add.to.row = addtorow, include.rownames = FALSE, include.colnames = FALSE )
View(df_lag_selection_gov)
View(df_lag_selection_gov)
View(df_lag_selection_inv)
View(df_lag_selection_inv)
View(save)
save[["log_gdp_pc_s"]][["x"]]
pp.test(variables$log_gdp_pc_s)
install.packages('tseries')
library(tseries)
pp.test(variables$log_gdp_pc_s)
pp.test(variables$log_gdp_pc_s)
View(save)
save[["log_gdp_pc_s"]]
save_adf <- list() #Genera una lista para guardar los resultados de los test de raiz unitaria
for (i in 1:ncol(variables)) { #Es un loop para realizar el test PP a cada variable guardada en save
col <- variables[,i]
save_adf[[i]] <- tidy(ur.df(col,type = c("none","drift","trend")))
}
install.packages('broom')
install.packages("broom")
install.packages("broom")
library(broom)
variables <- df_seas[,8:13] #Genera una matriz con variables desestacionalizadas y en logaritmos
variables_diff <- apply(variables, 2, diff)  #Genera una matriz con las variables en diferencias
save_adf <- list() #Genera una lista para guardar los resultados de los test de raiz unitaria
for (i in 1:ncol(variables)) { #Es un loop para realizar el test PP a cada variable guardada en save
col <- variables[,i]
save_adf[[i]] <- tidy(ur.df(col,type = c("none","drift","trend")))
}
ur.df(variables$log_gdp_pc_s)
ur.df(col,type ="trend")
urdfTest(variables$log_gdp_pc_s)
library(urca)
urdfTest(variables$log_gdp_pc_s)
pp.test(variables$log_gdp_pc_s)
install.packages("urca")
install.packages("urca")
library(urca)
ur.df(variables$log_gdp_pc_s, type = c("none", "drift", "trend"))
ur.df(variables$log_gdp_pc_s)
summary(ur.df(variables$log_gdp_pc_s, type = c("none", "drift", "trend")))
class(summary(ur.df(variables$log_gdp_pc_s, type = c("none", "drift", "trend"))))
install.pacakges("fUnitRoots")
install.packages("fUnitRoots")
library(fUnitRoots)
adfTest(variables$log_gdp_pc_s)
class(adfTest(variables$log_gdp_pc_s))
adfTest(variables$log_gdp_pc_s, type = c("nc", "c", "ct"))
adfTest(variables$log_gdp_pc_s, type = "ct")
class(adfTest(variables$log_gdp_pc_s, type = "ct"))
rm(list = ls())
setwd('C:/Users/MatildeCerdaRuiz/Documents/GitHub/govsize_2023')
ibrary(writexl)#para exportar el excel
library(writexl)#para exportar el excel
install.packages("stargazer")
install.packages("writexl")
library(writexl)#para exportar el excel
library(vars)
library(forecast)#for lag selection VAR
library(tidyverse)#manipulation de datos en general
library(xtable)#para tablas de latex
library(cointReg)#para FMOLS
library(urca)#para test de Johansen
library(dplyr)#manipulacion de datos en general
library(googlesheets4)#para importar de G. Drive
library(TSstudio)
library(patchwork)#para combinar graficos en una imagen
library(zoo)#funciones de series de tiempo
library(seasonal)#Para desestacionalizar
library(TSstudio)#PAra desestacionalizar
library(ggpubr)
library(patchwork) # para combinar graficos
library(aTSA)
library(broom)
library(dplyr)
library(stargazer)
library(vars)
raw_data <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA",
col_names = TRUE,
range = "A1:H65"
)
raw_data <- raw_data %>%
rename(
"date" = "DATE",
"gdp" = "RAW_GDP",
"gov_con" = "RAW_GOV_CON",
"pub_inv" = "RAW_PUB_INV",
"priv_inv" = "RAW_PRIV_INV",
"x" = "RAW_X",
"m" = "RAW_M",
"pop" = "RAW_POP"
)
var_names_bcn <- c("date", "gdp", "gov_con", "pub_inv", "priv_inv", "x", "m", "pop")
raw_data <- raw_data %>%
mutate(
gdp = gdp*10^6,
gov_con =gov_con*10^6,
pub_inv= pub_inv*10^6,
priv_inv=priv_inv*10^6,
x=x*10^6,
m=m*10^6
)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag(pop)-1,0)
)
for (x in 62:64) {
raw_data[x,9] = (raw_data[x-1,9] +raw_data[x-2,9] +raw_data[x-3,9] +raw_data[x-4,9])/4
}
for (x in 28:1) {
raw_data[x,9] = (raw_data[x+1,9] +raw_data[x+2,9] +raw_data[x+3,9] +raw_data[x+4,9])/4
}
for (x in 26:1) {
raw_data[x, 8] = raw_data[x+1, 8]/(1+raw_data[x+1,9])
}
for (x in 62:64) {
raw_data[x,8] = raw_data[x-1,8]*(1+ raw_data[x,9])
}
raw_data <- raw_data %>%
mutate(
gdp_pc = gdp/pop,
gov_gdp = (gov_con + pub_inv)/gdp,
gov_con_gdp = gov_con/gdp,
pub_inv_gdp= pub_inv/gdp,
priv_inv_gdp = priv_inv/gdp,
tr_op = (x+m)/gdp,
)
raw_data <- raw_data %>%
mutate(
growth_gdp_pc = gdp_pc/lag(gdp_pc)-1
)
#create dummies
raw_data <- raw_data %>%
mutate(
d_2008 = ifelse(date >= "2008-7-1" & date <= "2009-4-1" ,1,0)
)
raw_data <- raw_data %>%
mutate(
d_2018 = ifelse(date >= "2017-10-1",1,0)
)
#Time series set
ts_vars <- ts(data = raw_data[,10:ncol(raw_data)],
start = c(2006,1),
frequency = 4
)
#creating variable for date
df <- as.data.frame(raw_data)
df$date<-as.Date(df$date,  "%m/%d/%y")
seasonal_adj <- seas(x = ts_vars[,1:7])
#series(seasonal_adj,c("forecast.forecasts","s12"))
seasonal_adj <- final(seasonal_adj)
df_seas <- as.data.frame(seasonal_adj)
df_seas <- cbind(df$date, df_seas[,])
df_seas <- df_seas %>%
rename("date" = "df$date",
"gdp_pc_s"="gdp_pc",
"gov_gdp_s"="gov_gdp",
"gov_con_gdp_s"="gov_con_gdp",
"pub_inv_gdp_s"="pub_inv_gdp",
"priv_inv_gdp_s"="priv_inv_gdp",
"tr_op_s"="tr_op"
)
df_seas$date<-as.Date(df_seas$date,  "%m/%d/%y")
#Log tranasformation to GDP_pc
df_seas <- df_seas %>%
mutate(
log_gdp_pc_s= log(gdp_pc_s)
)
variables <- df_seas[,8:13] #Crea un dataframe con variables desestacionalizadas y en logaritmos
View(df_seas)
rm(list = ls())
setwd('C:/Users/MatildeCerdaRuiz/Documents/GitHub/govsize_2023')
library(writexl)#para exportar el excel
library(vars)
library(forecast)#for lag selection VAR
library(tidyverse)#manipulation de datos en general
library(xtable)#para tablas de latex
library(cointReg)#para FMOLS
library(urca)#para test de Johansen
library(dplyr)#manipulacion de datos en general
library(googlesheets4)#para importar de G. Drive
library(TSstudio)
library(patchwork)#para combinar graficos en una imagen
library(zoo)#funciones de series de tiempo
library(seasonal)#Para desestacionalizar
library(TSstudio)#PAra desestacionalizar
library(ggpubr)
library(patchwork) # para combinar graficos
library(aTSA)
library(broom)
library(dplyr)
library(stargazer)
library(vars)
raw_data <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA",
col_names = TRUE,
range = "A1:H65"
)
raw_data <- raw_data %>%
rename(
"date" = "DATE",
"gdp" = "RAW_GDP",
"gov_con" = "RAW_GOV_CON",
"pub_inv" = "RAW_PUB_INV",
"priv_inv" = "RAW_PRIV_INV",
"x" = "RAW_X",
"m" = "RAW_M",
"pop" = "RAW_POP"
)
#Declare vector of names
var_names_bcn <- c("date", "gdp", "gov_con", "pub_inv", "priv_inv", "x", "m", "pop")
#Rescale variables from BCN to millions of cords
raw_data <- raw_data %>%
mutate(
gdp = gdp*10^6,
gov_con =gov_con*10^6,
pub_inv= pub_inv*10^6,
priv_inv=priv_inv*10^6,
x=x*10^6,
m=m*10^6
)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag(pop)-1,0)
)
for (x in 62:64) {
raw_data[x,9] = (raw_data[x-1,9] +raw_data[x-2,9] +raw_data[x-3,9] +raw_data[x-4,9])/4
}
for (x in 28:1) {
raw_data[x,9] = (raw_data[x+1,9] +raw_data[x+2,9] +raw_data[x+3,9] +raw_data[x+4,9])/4
}
for (x in 26:1) {
raw_data[x, 8] = raw_data[x+1, 8]/(1+raw_data[x+1,9])
}
for (x in 62:64) {
raw_data[x,8] = raw_data[x-1,8]*(1+ raw_data[x,9])
}
raw_data <- raw_data %>%
mutate(
gdp_pc = gdp/pop,
gov_gdp = (gov_con + pub_inv)/gdp,
gov_con_gdp = gov_con/gdp,
pub_inv_gdp= pub_inv/gdp,
priv_inv_gdp = priv_inv/gdp,
tr_op = (x+m)/gdp,
)
#create growth gdp per capita
raw_data <- raw_data %>%
mutate(
growth_gdp_pc = gdp_pc/lag(gdp_pc)-1
)
#create dummies
raw_data <- raw_data %>%
mutate(
d_2008 = ifelse(date >= "2008-7-1" & date <= "2009-4-1" ,1,0)
)
raw_data <- raw_data %>%
mutate(
d_2018 = ifelse(date >= "2017-10-1",1,0)
)
#Time series set
ts_vars <- ts(data = raw_data[,10:ncol(raw_data)],
start = c(2006,1),
frequency = 4
)
df <- as.data.frame(raw_data)
df$date<-as.Date(df$date,  "%m/%d/%y")
seasonal_adj <- seas(x = ts_vars[,1:7])
#series(seasonal_adj,c("forecast.forecasts","s12"))
seasonal_adj <- final(seasonal_adj)
df_seas <- as.data.frame(seasonal_adj)
df_seas <- cbind(df$date, df_seas[,])
View(df_seas)
raw_data <- raw_data %>%
mutate(
gdp_pc = log(gdp/pop),
gov_gdp = (gov_con + pub_inv)/gdp,
gov_con_gdp = gov_con/gdp,
pub_inv_gdp= pub_inv/gdp,
priv_inv_gdp = priv_inv/gdp,
tr_op = (x+m)/gdp,
)
raw_data <- raw_data %>%
mutate(
d_2008 = ifelse(date >= "2008-7-1" & date <= "2009-4-1" ,1,0)
)
raw_data <- raw_data %>%
mutate(
d_2018 = ifelse(date >= "2017-10-1",1,0)
)
#Time series set
ts_vars <- ts(data = raw_data[,10:ncol(raw_data)],
start = c(2006,1),
frequency = 4
)
#creating variable for date
df <- as.data.frame(raw_data)
df$date<-as.Date(df$date,  "%m/%d/%y")
seasonal_adj <- seas(x = ts_vars[,1:7])
#series(seasonal_adj,c("forecast.forecasts","s12"))
seasonal_adj <- final(seasonal_adj)
df_seas <- as.data.frame(seasonal_adj)
df_seas <- cbind(df$date, df_seas[,])
View(df_seas)
variables <- df_seas[,2:7]
install.packages("UnitrootTests")
library(UnitrootTests)
install.packages("fUnitRoots")
library(fUnitRoots)
adfTest(variables$gdp_pc, type = c("nc"))
adfTest(variables$gdp_pc, type = c("nc"))$p.value
adfTest(variables$gdp_pc, type = c("nc"))@test$p.value
as.data.frame(adfTest(variables$gdp_pc, type = c("nc")))
class(adfTest(variables$gdp_pc, type = c("nc")))
View(variables)
as.dataframe(adfTest(variables$gdp_pc, type = c("nc"))@test$p.value)
as.data.frame(adfTest(variables$gdp_pc, type = c("nc"))@test$p.value)
u_root <- data.frame(matrix(NA,
nrow = 6,
ncol = 6))
u_root[1,1] <-  adfTest(variables$gdp_pc, type = c("nc"))@test$p.value
View(u_root)
u_root <- data.frame(matrix(NA, nrow = 6, ncol = 12))
View(u_root)
for (i in 1:ncol(variables)) { #Es un loop para realizar el test PP a cada variable guardada en save
col <- variables[,i]
u_root[i,1] <-  adfTest(col, type = c("nc"))@test$p.value
u_root[i,2] <-  adfTest(col, type = c("c"))@test$p.value
u_root[i,3] <-  adfTest(col, type = c("ct"))@test$p.value
}
View(u_root)
for (i in 1:ncol(variables)) { #Es un loop para realizar el test PP a cada variable guardada en save
diff(col)
print(diff(col))
for (i in 1:ncol(variables)) { #Es un loop para realizar el test PP a cada variable guardada en save
col <- variables[,i]
u_root[i,1] <-  adfTest(col, type = c("nc"))@test$p.value
u_root[i,2] <-  adfTest(col, type = c("c"))@test$p.value
u_root[i,3] <-  adfTest(col, type = c("ct"))@test$p.value
u_root[i,4] <-  adfTest(diff(col), type = c("nc"))@test$p.value
u_root[i,5] <-  adfTest(diff(col), type = c("c"))@test$p.value
u_root[i,6] <-  adfTest(diff(col), type = c("ct"))@test$p.value
}
for (i in 1:ncol(variables)) { #Es un loop para realizar el test PP a cada variable guardada en save
col <- variables[,i]
u_root[i,1] <-  adfTest(col, type = c("nc"))@test$p.value
u_root[i,2] <-  adfTest(col, type = c("c"))@test$p.value
u_root[i,3] <-  adfTest(col, type = c("ct"))@test$p.value
u_root[i,4] <-  adfTest(diff(col), type = c("nc"))@test$p.value
u_root[i,5] <-  adfTest(diff(col), type = c("c"))@test$p.value
u_root[i,6] <-  adfTest(diff(col), type = c("ct"))@test$p.value
}
View(u_root)
for (i in 1:ncol(variables)) { #Es un loop para realizar el test PP a cada variable guardada en save
col <- variables[,i]
u_root[i,1] <-  adfTest(col, type = c("nc"))@test$p.value
u_root[i,2] <-  adfTest(col, type = c("c"))@test$p.value
u_root[i,3] <-  adfTest(col, type = c("ct"))@test$p.value
u_root[i,4] <-  adfTest(diff(col), type = c("nc"))@test$p.value
u_root[i,5] <-  adfTest(diff(col), type = c("c"))@test$p.value
u_root[i,6] <-  adfTest(diff(col), type = c("ct"))@test$p.value
}
View(u_root)
View(u_root)
u_root
View(u_root)
View(u_root)
View(u_root)
View(u_root)
source("~/GitHub/govsize_2023/dofiles/GOV_SIZE.R")
