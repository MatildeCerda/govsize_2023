mutate(
gdp = gdp*10^6,
gov_con =gov_con*10^6,
pub_inv= pub_inv*10^6,
priv_inv=priv_inv*10^6,
x=x*10^6,
m=m*10^6
)
### Grafica de la serie poblacion
raw_pop <- ggplot(raw_data, aes(x = as.Date(date), y = pop)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_pop
### Debido a cambio estructural en la serie de poblacion, se procedio a reescalar la serie.
#Para reflejar la tendencia reflejada a partir de 2013, es restar al cambio porcentual de la serie
#punto de quiebre, la tasa de crecimiento trimestral de los datos previo al quiebre en el trimestre
# correspondiente.
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag(pop)-1,0)
)
for (x in 50:68) {
raw_data[x,9] = (raw_data[x-1,9] +raw_data[x-2,9] +raw_data[x-3,9] +raw_data[x-4,9])/4
}
for (x in 28:1) {
raw_data[x,9] = (raw_data[x+1,9] +raw_data[x+2,9] +raw_data[x+3,9] +raw_data[x+4,9])/4
}
for (x in 26:1) {
raw_data[x, 8] = raw_data[x+1, 8]/(1+raw_data[x+1,9])
}
for (x in 50:68) {
raw_data[x,8] = raw_data[x-1,8]*(1+ raw_data[x,9])
}
##Graph of re-scaled population (with title)
raw_data <- raw_data %>%
mutate(
log_gdp_pc = log(gdp/pop),
gov_gdp = (gov_con + pub_inv)/gdp,
gov_con_gdp = gov_con/gdp,
pub_inv_gdp= pub_inv/gdp,
priv_inv_gdp = priv_inv/gdp,
tr_op = (x+m)/gdp,
)
raw_data <- raw_data %>%
mutate(
d_2008 = ifelse(date >= "2008-7-1" & date <= "2009-4-1" ,1,0)
)
raw_data <- raw_data %>%
mutate(
d_2018 = ifelse(date >= "2017-10-1",1,0)
)
df <- as.data.frame(raw_data)
df$date<-as.Date(df$date,  "%m/%d/%y")
seasonal_adj <- seas(x = ts_vars[,1:7])
ts_vars <- ts(data = raw_data[,10:ncol(raw_data)],
start = c(2006,1),
frequency = 4
)
seasonal_adj <- seas(x = ts_vars[,1:7])
View(df)
View(ts_vars)
rm(list = ls())
setwd('C:/Users/MatildeCerdaRuiz/Documents/GitHub/govsize_2023')
path <- getwd()
library(patchwork)#para combinar graficos en una imagen
library(ggplot2)
library(fUnitRoots)
library(writexl)#para exportar el excel
library(vars)
library(forecast)#for lag selection VAR
library(tidyverse)#manipulation de datos en general
library(xtable)#para tablas de latex
library(cointReg)#para FMOLS
library(urca)#para test de Johansen
library(dplyr)#manipulacion de datos en general
library(googlesheets4)#para importar de G. Drive
library(TSstudio)
library(zoo)#funciones de series de tiempo
library(seasonal)#Para desestacionalizar
library(TSstudio)#PAra desestacionalizar
#library(ggpubr)
library(aTSA) #pptest
library(broom)
library(dplyr)
library(stargazer)
library(vars)
raw_data <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA3",
col_names = TRUE,
range = "A1:H69"
)
#rename
raw_data <- raw_data %>%
rename(
"date" = "DATE",
"gdp" = "RAW_GDP",
"gov_con" = "RAW_GOV_CON",
"pub_inv" = "RAW_PUB_INV",
"priv_inv" = "RAW_PRIV_INV",
"x" = "RAW_X",
"m" = "RAW_M",
"pop" = "RAW_POP"
)
var_names_bcn <- c("date", "gdp", "gov_con", "pub_inv", "priv_inv", "x", "m", "pop")
#Rescale variables from BCN to millions of cords
raw_data <- raw_data %>%
mutate(
gdp = gdp*10^6,
gov_con =gov_con*10^6,
pub_inv= pub_inv*10^6,
priv_inv=priv_inv*10^6,
x=x*10^6,
m=m*10^6
)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag(pop)-1,0)
)
for (x in 50:68) {
raw_data[x,9] = (raw_data[x-1,9] +raw_data[x-2,9] +raw_data[x-3,9] +raw_data[x-4,9])/4
}
for (x in 28:1) {
raw_data[x,9] = (raw_data[x+1,9] +raw_data[x+2,9] +raw_data[x+3,9] +raw_data[x+4,9])/4
}
for (x in 26:1) {
raw_data[x, 8] = raw_data[x+1, 8]/(1+raw_data[x+1,9])
}
for (x in 50:68) {
raw_data[x,8] = raw_data[x-1,8]*(1+ raw_data[x,9])
}
raw_data <- raw_data %>%
mutate(
log_gdp_pc = log(gdp/pop),
gov_gdp = (gov_con + pub_inv)/gdp,
gov_con_gdp = gov_con/gdp,
pub_inv_gdp= pub_inv/gdp,
priv_inv_gdp = priv_inv/gdp,
tr_op = (x+m)/gdp,
)
raw_data <- raw_data %>%
mutate(
growth_gdp_pc = log_gdp_pc/lag(log_gdp_pc)-1
)
raw_data <- raw_data %>%
mutate(
d_2008 = ifelse(date >= "2008-7-1" & date <= "2009-4-1" ,1,0)
)
raw_data <- raw_data %>%
mutate(
d_2018 = ifelse(date >= "2017-10-1",1,0)
)
#Time series set
ts_vars <- ts(data = raw_data[,10:ncol(raw_data)],
start = c(2006,1),
frequency = 4
)
#creating variable for date
df <- as.data.frame(raw_data)
df$date<-as.Date(df$date,  "%m/%d/%y")
seasonal_adj <- seas(x = ts_vars[,1:7])
seasonal_adj <- final(seasonal_adj)
df_seas <- as.data.frame(seasonal_adj)
df_seas <- cbind(df$date, df_seas[,])
df_seas <- df_seas %>%
rename(
"date" = "df$date",
)
variables <- df_seas[,2:7] #Crea un dataframe con variables desestacionalizadas y en logaritmos
u_root <- data.frame(matrix(NA, nrow = 6, ncol = 12)) #Crear un dataframe vacio que sera la tabla de salidas para el analisis de raices unitarias
for (i in 1:ncol(variables)) { #Es un loop para realizar el test PP a cada variable guardada en save
col <- variables[,i]
u_root[i,1] <-  adfTest(col, type = c("nc"))@test$p.value
u_root[i,2] <-  adfTest(col, type = c("c"))@test$p.value
u_root[i,3] <-  adfTest(col, type = c("ct"))@test$p.value
u_root[i,4] <-  adfTest(diff(col), type = c("nc"))@test$p.value
u_root[i,5] <-  adfTest(diff(col), type = c("c"))@test$p.value
u_root[i,6] <-  adfTest(diff(col), type = c("ct"))@test$p.value
u_root[i,7] <-  pp.test(col)[1,3]
u_root[i,8] <-  pp.test(col)[2,3]
u_root[i,9] <-  pp.test(col)[3,3]
u_root[i,10] <-  pp.test(diff(col))[1,3]
u_root[i,11] <-  pp.test(diff(col))[2,3]
u_root[i,12] <-  pp.test(diff(col))[3,3]
}
series = c( "PIB per ́capita","Gasto de Gobierno Agregado","Gasto de Gobierno Corriente","Inversion fija Publica","Inversion Fija Privada","Apertura Comercial")
u_root$series = series
u_root <- u_root %>% relocate(series)
# Redondeando los valores en la tabla
u_root <- u_root %>%
mutate(across(where(is.numeric), round, digits=2))
# Exportar codigo de raices unitarias a latex
View(u_root)
addtorow <- list()
addtorow$pos <- list(0)
addtorow$command <- c(" \\toprule
\\headrow & \\multicolumn{6}{c}{ADF} &
\\multicolumn{6}{c}{PP}\\\\
\\midrule
\\headrow & \\multicolumn{3}{c}{Variable en nivel} &
\\multicolumn{3}{c}{Variable en diferencias} &
\\multicolumn{3}{c}{Variable en nivel} &
\\multicolumn{3}{c}{Variable en diferencias}\\\\
\\midrule
\\headrow Serie trimestral &
\\multicolumn{1}{c}{N.} &
\\multicolumn{1}{c}{I.} &
\\multicolumn{1}{c}{I. y T.} &
\\multicolumn{1}{c}{N.} &
\\multicolumn{1}{c}{I.} &
\\multicolumn{1}{c}{I. y T.}&
\\multicolumn{1}{c}{N.} &
\\multicolumn{1}{c}{I.} &
\\multicolumn{1}{c}{I. y T.} &
\\multicolumn{1}{c}{N.} &
\\multicolumn{1}{c}{I.} &
\\multicolumn{1}{c}{I. y T.} \\\\
\\bottomrule")
print(xtable(u_root), add.to.row = addtorow, include.rownames = FALSE, include.colnames = FALSE )
johansen_results <- read.csv(paste(getwd(), "dofiles/tabla_johansen.csv", sep="/"),header=FALSE)
johansen_results <- johansen_results %>%
mutate(across(where(is.numeric), round, digits=2))
col1_johansen<-c(
"Gasto Agregado",
"",
"Inversión fija pub",
""
)
col2_johansen<-c(
"Traza",
"Valor propio",
"Traza",
"Valor propio"
)
johansen_results$col1 <- col1_johansen
johansen_results$col2 <- col2_johansen
johansen_results<- johansen_results %>% relocate(col2)
johansen_results <-johansen_results %>% relocate(col1)
View(df_seas)
View(df_seas)
View(raw_data)
rm(list = ls())
setwd('C:/Users/MatildeCerdaRuiz/Documents/GitHub/govsize_2023')
path <- getwd()
library(patchwork)#para combinar graficos en una imagen
library(ggplot2)
library(fUnitRoots)
library(writexl)#para exportar el excel
library(vars)
library(forecast)#for lag selection VAR
library(tidyverse)#manipulation de datos en general
library(xtable)#para tablas de latex
library(cointReg)#para FMOLS
library(urca)#para test de Johansen
library(dplyr)#manipulacion de datos en general
library(googlesheets4)#para importar de G. Drive
library(TSstudio)
library(zoo)#funciones de series de tiempo
library(seasonal)#Para desestacionalizar
library(TSstudio)#PAra desestacionalizar
#library(ggpubr)
library(aTSA) #pptest
library(broom)
library(dplyr)
library(stargazer)
library(vars)
raw_data <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA3",
col_names = TRUE,
range = "A1:I69"
)
raw_data <- raw_data %>%
rename(
"date" = "DATE",
"gdp" = "RAW_GDP",
"gov_con" = "RAW_GOV_CON",
"pub_inv" = "RAW_PUB_INV",
"priv_inv" = "RAW_PRIV_INV",
"x" = "RAW_X",
"m" = "RAW_M",
"pop" = "RAW_POP",
"gdp_nom" = "RAW_GDP_NOM"
)
var_names_bcn <- c("date", "gdp", "gov_con", "pub_inv", "priv_inv", "x", "m", "pop")
#Rescale variables from BCN to millions of cords
raw_data <- raw_data %>%
mutate(
gdp = gdp*10^6,
gov_con =gov_con*10^6,
pub_inv= pub_inv*10^6,
priv_inv=priv_inv*10^6,
x=x*10^6,
m=m*10^6,
gdp_nom=gdp_nom*10^6
)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag(pop)-1,0)
)
for (x in 50:68) {
raw_data[x,9] = (raw_data[x-1,9] +raw_data[x-2,9] +raw_data[x-3,9] +raw_data[x-4,9])/4
}
for (x in 28:1) {
raw_data[x,9] = (raw_data[x+1,9] +raw_data[x+2,9] +raw_data[x+3,9] +raw_data[x+4,9])/4
}
for (x in 26:1) {
raw_data[x, 8] = raw_data[x+1, 8]/(1+raw_data[x+1,9])
}
for (x in 50:68) {
raw_data[x,8] = raw_data[x-1,8]*(1+ raw_data[x,9])
}
raw_data <- raw_data %>%
mutate(
log_gdp_pc = log(gdp/pop),
gov_gdp = (gov_con + pub_inv)/gdp_nom,
gov_con_gdp = gov_con/gdp_nom,
pub_inv_gdp= pub_inv/gdp_nom,
priv_inv_gdp = priv_inv/gdp_nom,
tr_op = (x+m)/gdp_nom,
)
raw_data <- raw_data %>%
mutate(
growth_gdp_pc = log_gdp_pc/lag(log_gdp_pc)-1
)
raw_data <- raw_data %>%
mutate(
d_2008 = ifelse(date >= "2008-7-1" & date <= "2009-4-1" ,1,0)
)
raw_data <- raw_data %>%
mutate(
d_2018 = ifelse(date >= "2017-10-1",1,0)
)
ts_vars <- ts(data = raw_data[,10:ncol(raw_data)],
start = c(2006,1),
frequency = 4
)
#creating variable for date
df <- as.data.frame(raw_data)
df$date<-as.Date(df$date,  "%m/%d/%y")
seasonal_adj <- seas(x = ts_vars[,1:7])
rm(list = ls())
setwd('C:/Users/MatildeCerdaRuiz/Documents/GitHub/govsize_2023')
path <- getwd()
library(patchwork)#para combinar graficos en una imagen
library(ggplot2)
library(fUnitRoots)
library(writexl)#para exportar el excel
library(vars)
library(forecast)#for lag selection VAR
library(tidyverse)#manipulation de datos en general
library(xtable)#para tablas de latex
library(cointReg)#para FMOLS
library(urca)#para test de Johansen
library(dplyr)#manipulacion de datos en general
library(googlesheets4)#para importar de G. Drive
library(TSstudio)
library(zoo)#funciones de series de tiempo
library(seasonal)#Para desestacionalizar
library(TSstudio)#PAra desestacionalizar
#library(ggpubr)
library(aTSA) #pptest
library(broom)
library(dplyr)
library(stargazer)
library(vars)
raw_data <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA3",
col_names = TRUE,
range = "A1:I69"
)
raw_data <- raw_data %>%
rename(
"date" = "DATE",
"gdp" = "RAW_GDP",
"gov_con" = "RAW_GOV_CON",
"pub_inv" = "RAW_PUB_INV",
"priv_inv" = "RAW_PRIV_INV",
"x" = "RAW_X",
"m" = "RAW_M",
"pop" = "RAW_POP",
"gdp_nom" = "RAW_GDP_NOM"
)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag(pop)-1,0)
)
for (x in 50:68) {
raw_data[x,9] = (raw_data[x-1,9] +raw_data[x-2,9] +raw_data[x-3,9] +raw_data[x-4,9])/4
}
for (x in 28:1) {
raw_data[x,9] = (raw_data[x+1,9] +raw_data[x+2,9] +raw_data[x+3,9] +raw_data[x+4,9])/4
}
for (x in 26:1) {
raw_data[x, 8] = raw_data[x+1, 8]/(1+raw_data[x+1,9])
}
for (x in 50:68) {
raw_data[x,8] = raw_data[x-1,8]*(1+ raw_data[x,9])
}
View(raw_data)
rm(list = ls())
setwd('C:/Users/MatildeCerdaRuiz/Documents/GitHub/govsize_2023')
path <- getwd()
library(patchwork)#para combinar graficos en una imagen
library(ggplot2)
library(fUnitRoots)
library(writexl)#para exportar el excel
library(vars)
library(forecast)#for lag selection VAR
library(tidyverse)#manipulation de datos en general
library(xtable)#para tablas de latex
library(cointReg)#para FMOLS
library(urca)#para test de Johansen
library(dplyr)#manipulacion de datos en general
library(googlesheets4)#para importar de G. Drive
library(TSstudio)
library(zoo)#funciones de series de tiempo
library(seasonal)#Para desestacionalizar
library(TSstudio)#PAra desestacionalizar
#library(ggpubr)
library(aTSA) #pptest
library(broom)
library(dplyr)
library(stargazer)
library(vars)
#Import data from Drive
raw_data <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA3",
col_names = TRUE,
range = "A1:I69"
)
#Data procesing
#rename
raw_data <- raw_data %>%
rename(
"date" = "DATE",
"gdp" = "RAW_GDP",
"gov_con" = "RAW_GOV_CON",
"pub_inv" = "RAW_PUB_INV",
"priv_inv" = "RAW_PRIV_INV",
"x" = "RAW_X",
"m" = "RAW_M",
"pop" = "RAW_POP",
"gdp_nom" = "RAW_GDP_NOM"
)
var_names_bcn <- c("date", "gdp", "gov_con", "pub_inv", "priv_inv", "x", "m", "pop","gdp_nom")
raw_data <- raw_data %>%
mutate(
gdp = gdp*10^6,
gov_con =gov_con*10^6,
pub_inv= pub_inv*10^6,
priv_inv=priv_inv*10^6,
x=x*10^6,
m=m*10^6,
gdp_nom=gdp_nom*10^6
)
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag(pop)-1,0)
)
for (x in 50:68) {
raw_data[x,10] = (raw_data[x-1,10] +raw_data[x-2,10] +raw_data[x-3,10] +raw_data[x-4,10])/4
}
for (x in 28:1) {
raw_data[x,10] = (raw_data[x+1,10] +raw_data[x+2,10] +raw_data[x+3,10] +raw_data[x+4,10])/4
}
for (x in 26:1) {
raw_data[x, 8] = raw_data[x+1, 8]/(1+raw_data[x+1,10])
}
for (x in 50:68) {
raw_data[x,8] = raw_data[x-1,8]*(1+ raw_data[x,10])
}
raw_data <- raw_data %>%
mutate(
log_gdp_pc = log(gdp/pop),
gov_gdp = (gov_con + pub_inv)/gdp_nom,
gov_con_gdp = gov_con/gdp_nom,
pub_inv_gdp= pub_inv/gdp_nom,
priv_inv_gdp = priv_inv/gdp_nom,
tr_op = (x+m)/gdp_nom,
)
raw_data <- raw_data %>%
mutate(
growth_gdp_pc = log_gdp_pc/lag(log_gdp_pc)-1
)
#create dummies
raw_data <- raw_data %>%
mutate(
d_2008 = ifelse(date >= "2008-7-1" & date <= "2009-4-1" ,1,0)
)
raw_data <- raw_data %>%
mutate(
d_2018 = ifelse(date >= "2017-10-1",1,0)
)
View(raw_data)
ts_vars <- ts(data = raw_data[,11:ncol(raw_data)],
start = c(2006,1),
frequency = 4
)
df <- as.data.frame(raw_data)
df$date<-as.Date(df$date,  "%m/%d/%y")
View(ts_vars)
seasonal_adj <- seas(x = ts_vars[,1:7])
seasonal_adj <- final(seasonal_adj)
df_seas <- as.data.frame(seasonal_adj)
df_seas <- cbind(df$date, df_seas[,])
df_seas <- df_seas %>%
rename(
"date" = "df$date",
)
path<-getwd()
#exporting the raw data
write_xlsx(raw_data, paste(path,"raw_data.xlsx", sep="/"))
write.csv(raw_data, paste(path,"raw_data.csv", sep="/"))
