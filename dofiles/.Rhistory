install.packages("xtable")
library(xtable)
jotest_table <- rbind.data.frame(c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"))
View(jotest)
View(jotest)
View(jotest)
View(jotest_table)
library(xtable)#para tablas de latex
print(xtable(jotest_table, type="latex"))
jotest_table <- data.frame(c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"))
View(jotest_table)
jotest_table <- rbind.data.frame(c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"),c("Variable", "Tipo de prueba"))
help("rbind.data.frame")
<<<<<<< Updated upstream
View(df_seas)
variables <- df_seas[,8:13]
class(variables)
View(variables)
variables <- df_seas[,8:13]
apply(variables,2,pp.test)
install.packages("tseries")
library(tseries)
variables <- df_seas[,8:13]
apply(variables,2,pp.test)
variables <- df_seas[,8:13]
apply(variables,2,PP.test)
variables <- df_seas[,8:13]
apply(variables,2,PP.test)
install.packages("aTSA")
library(aTSA)
variables <- df_seas[,8:13]
apply(variables,2,pp.test)
install.packages("broom")
install.packages("broom")
install.packages("broom")
install.packages("broom")
library(broom)
variables <- df_seas[,8:13]
apply(variables,2,tidy(pp.test))
install.packages("aTSA")
library(aTSA)
variables <- df_seas[,8:13]
apply(variables,2,tidy(pp.test))
pp_test<- apply(variables,2,tidy(pp.test))
variables <- df_seas[,8:13]
pp_test<- apply(variables,2,pp.test)
tidy(pp.test(variables$log_gdp_pc_s))
variables <- df_seas[,8:13]
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
pptest <- tidy(pp.test(col))
}
View(pptest)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[i, ] <- tidy(pp.test(col))
}
View(save)
variables <- df_seas[,8:13]
save <- matrix(nrow=3*ncol(variables), ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[i, ] <- tidy(pp.test(col))
}
View(save)
save
variables <- df_seas[,8:13]
save <- matrix(nrow=6, ncol=3)
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[i, ] <- tidy(pp.test(col))
}
save
for (i in 1:ncol(variables)) {
col <- variables[,i]
save <- tidy(pp.test(col))
}
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
}
View(save)
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save <- tidy(pp.test(col))
}
View(raw_plot6)
View(save)
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
pp[[i]] <- tidy(pp.test(col))
save[i,] <- pp
View(save)
for (i in 1:ncol(variables)) {
col <- variables[,i]
pp <- tidy(pp.test(col))
save[i,] <- pp
}
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
}
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
}
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
}
View(save)
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save <- tidy(pp.test(col))
}
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save <- tidy(pp.test(col))
}
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[i,] <- tidy(pp.test(col))
}
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[,i] <- tidy(pp.test(col))
}
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
}
install.packages("aTSA")
install.packages("broom")
install.packages("broom")
library(aTSA)
library(broom)
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
}
View(save)
save
save[[1:6,]]
save[1:6,]
save[[1:6]]
=======
install.packages(c("cpp11", "dbplyr", "digest", "haven", "jsonlite", "KernSmooth", "Matrix", "MatrixModels", "mgcv", "pkgload", "processx", "Rcpp", "readxl", "rmarkdown", "rstudioapi", "testthat", "xml2"))
install.packages(c("cpp11", "dbplyr", "digest", "haven", "jsonlite", "KernSmooth", "Matrix", "MatrixModels", "mgcv", "pkgload", "processx", "Rcpp", "readxl", "rmarkdown", "rstudioapi", "testthat", "xml2"))
install.packages(c("cpp11", "dbplyr", "digest", "haven", "jsonlite", "KernSmooth", "Matrix", "MatrixModels", "mgcv", "pkgload", "processx", "Rcpp", "readxl", "rmarkdown", "rstudioapi", "testthat", "xml2"))
>>>>>>> Stashed changes
library(urca)
variables <- df_seas[,8:13] #Crea un dataframe con variables desestacionalizadas y en logaritmos
save <- list() #Genera una lista para guardar los resultados de los test de raiz unitaria
for (i in 1:ncol(variables)) { #Es un loop para realizar el test PP a cada variable guardada en save
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
}
library(vars)
library(forecast)#for lag selection VAR
library(tidyverse)#manipulation de datos en general
library(xtable)#para tablas de latex
library(cointReg)#para FMOLS
library(urca)#para test de Johansen
library(dplyr)#manipulacion de datos en general
library(googlesheets4)#para importar de G. Drive
library(TSstudio)
library(patchwork)#para combinar graficos en una imagen
library(zoo)#funciones de series de tiempo
library(seasonal)#Para desestacionalizar
library(TSstudio)#PAra desestacionalizar
library(ggpubr)
library(aTSA)
library(broom)
library(dplyr)
library(vars)
variables <- df_seas[,8:13] #Crea un dataframe con variables desestacionalizadas y en logaritmos
save <- list() #Genera una lista para guardar los resultados de los test de raiz unitaria
for (i in 1:ncol(variables)) { #Es un loop para realizar el test PP a cada variable guardada en save
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
}
names(save) <- colnames(variables)
variables_diff <- apply(variables, 2, diff)
save_diff <- list() #Genera una lista para guardar los resultados de los test de raiz unitaria
for (i in 1:ncol(variables_diff)) { #Es un loop para realizar el test PP a cada variable guardada en save
col <- variables_diff[,i]
save_diff[[i]] <- tidy(pp.test(col))
}
u_root <- data.frame(matrix(NA,
nrow = 6,
ncol = 6))
#Comenzar llenado de la tabla de raices unitarias
#Variables en niveles
# GDP_PC: Nivel con tres especificaciones
u_root[1,1] <- as.data.frame.list(save[[1]])[1,3]
u_root[1,2] <- as.data.frame.list(save[[1]])[2,3]
u_root[1,3] <- as.data.frame.list(save[[1]])[3,3]
# GOV_GDP: Nivel con tres especificaciones
u_root[2,1] <- as.data.frame.list(save[[2]])[1,3]
u_root[2,2] <- as.data.frame.list(save[[2]])[2,3]
u_root[2,3] <- as.data.frame.list(save[[2]])[3,3]
# Consumo_GDP: Nivel con tres especificaciones
u_root[3,1] <- as.data.frame.list(save[[3]])[1,3]
u_root[3,2] <- as.data.frame.list(save[[3]])[2,3]
u_root[3,3] <- as.data.frame.list(save[[3]])[3,3]
# inv_publica: Nivel con tres especificaciones
u_root[4,1] <- as.data.frame.list(save[[4]])[1,3]
u_root[4,2] <- as.data.frame.list(save[[4]])[2,3]
u_root[4,3] <- as.data.frame.list(save[[4]])[3,3]
# inv_privada: Nivel con tres especificaciones
u_root[5,1] <- as.data.frame.list(save[[5]])[1,3]
u_root[5,2] <- as.data.frame.list(save[[5]])[2,3]
u_root[5,3] <- as.data.frame.list(save[[5]])[3,3]
# apertura_comercial: Nivel con tres especificaciones
u_root[6,1] <- as.data.frame.list(save[[6]])[1,3]
u_root[6,2] <- as.data.frame.list(save[[6]])[2,3]
u_root[6,3] <- as.data.frame.list(save[[6]])[3,3]
#Variables en diferencias
# GDP_PC: Nivel con tres especificaciones
u_root[1,4] <- as.data.frame.list(save_diff[[1]])[1,3]
u_root[1,5] <- as.data.frame.list(save_diff[[1]])[2,3]
u_root[1,6] <- as.data.frame.list(save_diff[[1]])[3,3]
# GOV_GDP: Nivel con tres especificaciones
u_root[2,4] <- as.data.frame.list(save_diff[[2]])[1,3]
u_root[2,5] <- as.data.frame.list(save_diff[[2]])[2,3]
u_root[2,6] <- as.data.frame.list(save_diff[[2]])[3,3]
# Consumo_GDP: Nivel con tres especificaciones
u_root[3,4] <- as.data.frame.list(save_diff[[3]])[1,3]
u_root[3,5] <- as.data.frame.list(save_diff[[3]])[2,3]
u_root[3,6] <- as.data.frame.list(save_diff[[3]])[3,3]
# inv_publica: Nivel con tres especificaciones
u_root[4,4] <- as.data.frame.list(save_diff[[4]])[1,3]
u_root[4,5] <- as.data.frame.list(save_diff[[4]])[2,3]
u_root[4,6] <- as.data.frame.list(save_diff[[4]])[3,3]
# inv_privada: Nivel con tres especificaciones
u_root[5,4] <- as.data.frame.list(save_diff[[5]])[1,3]
u_root[5,5] <- as.data.frame.list(save_diff[[5]])[2,3]
u_root[5,6] <- as.data.frame.list(save_diff[[5]])[3,3]
# apertura_comercial: Nivel con tres especificaciones
u_root[6,4] <- as.data.frame.list(save_diff[[6]])[1,3]
u_root[6,5] <- as.data.frame.list(save_diff[[6]])[2,3]
u_root[6,6] <- as.data.frame.list(save_diff[[6]])[3,3]
series = c( "PIB per ́capita","Gasto de Gobierno Agregado","Gasto de Gobierno Corriente","Inversion fija Publica","Inversion Fija Privada","Apertura Comercial")
u_root$series = series
u_root <- u_root %>% relocate(series)
# Redondeando los valores en la tabla
u_root <- u_root %>%
mutate(across(where(is.numeric), round, digits=2))
var_gob <-  variables[,1:2]
lag_selection_gov <- VARselect(var_gob, lag.max = 7, type = c("const", "trend", "both", "none"),
season = NULL, exogen = NULL)
lag_selection_gov
df_lag_selection_gov <- as.data.frame(VARselect(var_gob, lag.max = 7, type = c("const", "trend", "both", "none"),
season = NULL, exogen = NULL)[[2]])
View(df_lag_selection_gov)
Criterio = c("AIC","HQ","SC","FPE")
df_lag_selection_gov$Criterio = Criterio
df_lag_selection_gov <-df_lag_selection_gov %>% relocate(Criterio)
df_lag_selection_gov <- df_lag_selection_gov %>%
mutate(across(where(is.numeric), round, digits=2))
View(df_lag_selection_gov)
var_inv <- variables %>%  select(log_gdp_pc_s, log_pub_inv_gdp_s)
lag_selection_inv <- VARselect(var_inv, lag.max = 7, type = c("const", "trend", "both", "none"),
season = NULL, exogen = NULL)
lag_selection_inv
var_inv <- variables %>%  select(log_gdp_pc_s, log_pub_inv_gdp_s)
lag_selection_inv <- VARselect(var_inv, lag.max = 5, type = c("const", "trend", "both", "none"),
season = NULL, exogen = NULL)
df_lag_selection_inv <- as.data.frame(VARselect(var_inv, lag.max = 5, type = c("const", "trend", "both", "none"),
season = NULL, exogen = NULL)[[2]])
df_lag_selection_inv$Criterio = Criterio
df_lag_selection_inv <-df_lag_selection_inv %>% relocate(Criterio)
# Redondeando los valores en la tabla
df_lag_selection_inv <- df_lag_selection_inv %>%
mutate(across(where(is.numeric), round, digits=2))
View(df_lag_selection_inv)
install.packages('lmtest')
install.packages("lmtest")
library(lmtest) #Test de causalidad de granger
View(variables)
grangertest(variables[,2],variables[,1], order = 1)
grangertest(variables[,1],variables[,2], order = 1) #PIB causa a Gasto de Gobierno
class(grangertest(variables[,1],variables[,2], order = 1))
for (i in 1:4) {
grangertest(variables[,2],variables[,1], order = 1) #Gasto de Gobierno causa a PIB
grangertest(variables[,1],variables[,2], order = 1) #PIB causa a Gasto de Gobierno
}
for (i in 1:4) {
grangertest(variables[,2],variables[,1], order = i) #Gasto de Gobierno causa a PIB
grangertest(variables[,1],variables[,2], order = i) #PIB causa a Gasto de Gobierno
}
for (i in 1:4) {
granger_gov_pib_i <- grangertest(variables[,2],variables[,1], order = i) #Gasto de Gobierno causa a PIB
granger_pib_gov_i <- grangertest(variables[,1],variables[,2], order = i) #PIB causa a Gasto de Gobierno
}
View(granger_gov_pib_i)
View(granger_pib_gov_i)
grangertest(variables[,2],variables[,1], order = i)
grangertest(variables[,2],variables[,1], order = i)[2,3]
grangertest(variables[,2],variables[,1], order = i)[2,4]
for (i in 1:4) {
granger_gov_pib[[i]] <- grangertest(variables[,2],variables[,1], order = i) #Gasto de Gobierno causa a PIB
granger_pib_gov[[i]] <- grangertest(variables[,1],variables[,2], order = i) #PIB causa a Gasto de Gobierno
}
granger_gov_pib <- list()
granger_pib_gov <- list()
for (i in 1:4) {
granger_gov_pib[[i]] <- grangertest(variables[,2],variables[,1], order = i) #Gasto de Gobierno causa a PIB
granger_pib_gov[[i]] <- grangertest(variables[,1],variables[,2], order = i) #PIB causa a Gasto de Gobierno
}
View(granger_pib_gov)
View(granger_gov_pib)
View(granger_gov_pib_i)
View(granger_gov_pib)
granger_gov_pib[[i]]
granger_gov_pib[[2]]
granger_gov_pib[[3]]
granger_gov_pib[[3]][2,4]
granger_inv_pib <- list()
granger_pib_inv <- list()
for (i in 1:4) {
granger_inv_pib[[i]] <- grangertest(variables[,4],variables[,1], order = i) #Gasto de Gobierno causa a PIB
granger_pib_inv[[i]] <- grangertest(variables[,1],variables[,4], order = i) #PIB causa a Gasto de Gobierno
}
prueba_granger <- data.frame(matrix(NA, nrow = 4, ncol = 5))
View(prueba_granger)
prueba_granger[1,1] <- c("Gasto publico agregado no causa a PIB per capita")
View(prueba_granger)
prueba_granger <- data.frame(matrix(NA, nrow = 4, ncol = 5))
prueba_granger[1,1] <- c("Gasto publico agregado no causa a PIB per capita")
prueba_granger[2,1] <- c("PIB per capita no causa a Gasto publico agregado")
prueba_granger[3,1] <- c("Inversion fija publica no causa a PIB per capita")
prueba_granger[4,1] <- c("PIB per capita no causa a Inversion fija publica")
View(prueba_granger)
for (i in 1:4) {
prueba_granger[1,i] <- granger_gov_pib[[i]][2,4]
}
View(prueba_granger)
prueba_granger <- data.frame(matrix(NA, nrow = 4, ncol = 5))
prueba_granger[1,1] <- c("Gasto publico agregado no causa a PIB per capita")
prueba_granger[2,1] <- c("PIB per capita no causa a Gasto publico agregado")
prueba_granger[3,1] <- c("Inversion fija publica no causa a PIB per capita")
prueba_granger[4,1] <- c("PIB per capita no causa a Inversion fija publica")
for (i in 1:4) {
prueba_granger[1,i+1] <- granger_gov_pib[[i]][2,4]
}
View(prueba_granger)
for (i in 1:4) {
prueba_granger[1,i+1] <- granger_gov_pib[[i]][2,4]
prueba_granger[2,i+1] <- granger_pib_gov[[i]][2,4]
prueba_granger[3,i+1] <- granger_inv_pib[[i]][2,4]
prueba_granger[4,i+1] <- granger_gov_inv[[i]][2,4]
}
for (i in 1:4) {
prueba_granger[1,i+1] <- granger_gov_pib[[i]][2,4]
prueba_granger[2,i+1] <- granger_pib_gov[[i]][2,4]
prueba_granger[3,i+1] <- granger_inv_pib[[i]][2,4]
prueba_granger[4,i+1] <- granger_pib_inv[[i]][2,4]
}
View(prueba_granger)
granger_pib_gov[[1]][2,4]
granger_pib_gov[[1]]
prueba_granger <- data.frame(matrix(NA, nrow = 4, ncol = 5))
prueba_granger[1,1] <- c("Gasto publico agregado no causa a PIB per capita")
prueba_granger[2,1] <- c("PIB per capita no causa a Gasto publico agregado")
prueba_granger[3,1] <- c("Inversion fija publica no causa a PIB per capita")
prueba_granger[4,1] <- c("PIB per capita no causa a Inversion fija publica")
###Llenado del cuadro de test de procedencia de Granger
for (i in 1:4) {
prueba_granger[1,i+1] <- granger_gov_pib[[i]][2,4]
prueba_granger[2,i+1] <- granger_pib_gov[[i]][2,4]
prueba_granger[3,i+1] <- granger_inv_pib[[i]][2,4]
prueba_granger[4,i+1] <- granger_pib_inv[[i]][2,4]
}
## Creacion de titulos y subtitulos para exportar cuadro a latex
addtorow <- list()
addtorow$pos <- list(0)
addtorow$command <- c(" \\toprule
\\headrow & \\multicolumn{5}{c}{Numero de rezagos} \\\\
\\midrule
\\headrow Hipotesis Nula &
\\multicolumn{1}{c}{1} &
\\multicolumn{1}{c}{2} &
\\multicolumn{1}{c}{3} &
\\multicolumn{1}{c}{4} \\\\
\\bottomrule")
print(xtable(prueba_granger), add.to.row = addtorow, include.rownames = FALSE, include.colnames = FALSE )
library(xtable)
prueba_granger <- data.frame(matrix(NA, nrow = 4, ncol = 5))
prueba_granger[1,1] <- c("Gasto publico agregado no causa a PIB per capita")
prueba_granger[2,1] <- c("PIB per capita no causa a Gasto publico agregado")
prueba_granger[3,1] <- c("Inversion fija publica no causa a PIB per capita")
prueba_granger[4,1] <- c("PIB per capita no causa a Inversion fija publica")
###Llenado del cuadro de test de procedencia de Granger
for (i in 1:4) {
prueba_granger[1,i+1] <- granger_gov_pib[[i]][2,4]
prueba_granger[2,i+1] <- granger_pib_gov[[i]][2,4]
prueba_granger[3,i+1] <- granger_inv_pib[[i]][2,4]
prueba_granger[4,i+1] <- granger_pib_inv[[i]][2,4]
}
## Creacion de titulos y subtitulos para exportar cuadro a latex
addtorow <- list()
addtorow$pos <- list(0)
addtorow$command <- c(" \\toprule
\\headrow & \\multicolumn{5}{c}{Numero de rezagos} \\\\
\\midrule
\\headrow Hipotesis Nula &
\\multicolumn{1}{c}{1} &
\\multicolumn{1}{c}{2} &
\\multicolumn{1}{c}{3} &
\\multicolumn{1}{c}{4} \\\\
\\bottomrule")
print(xtable(prueba_granger), add.to.row = addtorow, include.rownames = FALSE, include.colnames = FALSE )
addtorow <- list()
addtorow$pos <- list(0)
addtorow$command <- c(" \\toprule
\\headrow & \\multicolumn{4}{c}{Numero de rezagos} \\\\
\\midrule
\\headrow Hipotesis Nula &
\\multicolumn{1}{c}{1} &
\\multicolumn{1}{c}{2} &
\\multicolumn{1}{c}{3} &
\\multicolumn{1}{c}{4} \\\\
\\bottomrule")
print(xtable(prueba_granger), add.to.row = addtorow, include.rownames = FALSE, include.colnames = FALSE )
View(df_lag_selection_gov)
View(df_lag_selection_gov)
View(df_lag_selection_inv)
View(df_lag_selection_inv)
View(save)
save[["log_gdp_pc_s"]][["x"]]
pp.test(variables$log_gdp_pc_s)
install.packages('tseries')
library(tseries)
pp.test(variables$log_gdp_pc_s)
pp.test(variables$log_gdp_pc_s)
View(save)
save[["log_gdp_pc_s"]]
save_adf <- list() #Genera una lista para guardar los resultados de los test de raiz unitaria
for (i in 1:ncol(variables)) { #Es un loop para realizar el test PP a cada variable guardada en save
col <- variables[,i]
save_adf[[i]] <- tidy(ur.df(col,type = c("none","drift","trend")))
}
install.packages('broom')
install.packages("broom")
install.packages("broom")
library(broom)
variables <- df_seas[,8:13] #Genera una matriz con variables desestacionalizadas y en logaritmos
variables_diff <- apply(variables, 2, diff)  #Genera una matriz con las variables en diferencias
save_adf <- list() #Genera una lista para guardar los resultados de los test de raiz unitaria
for (i in 1:ncol(variables)) { #Es un loop para realizar el test PP a cada variable guardada en save
col <- variables[,i]
save_adf[[i]] <- tidy(ur.df(col,type = c("none","drift","trend")))
}
ur.df(variables$log_gdp_pc_s)
ur.df(col,type ="trend")
urdfTest(variables$log_gdp_pc_s)
library(urca)
urdfTest(variables$log_gdp_pc_s)
pp.test(variables$log_gdp_pc_s)
install.packages("urca")
install.packages("urca")
library(urca)
ur.df(variables$log_gdp_pc_s, type = c("none", "drift", "trend"))
ur.df(variables$log_gdp_pc_s)
summary(ur.df(variables$log_gdp_pc_s, type = c("none", "drift", "trend")))
class(summary(ur.df(variables$log_gdp_pc_s, type = c("none", "drift", "trend"))))
install.pacakges("fUnitRoots")
install.packages("fUnitRoots")
library(fUnitRoots)
adfTest(variables$log_gdp_pc_s)
class(adfTest(variables$log_gdp_pc_s))
adfTest(variables$log_gdp_pc_s, type = c("nc", "c", "ct"))
adfTest(variables$log_gdp_pc_s, type = "ct")
class(adfTest(variables$log_gdp_pc_s, type = "ct"))
