col <- variables[,i]
pptest <- tidy(pp.test(col))
}
View(pptest)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[i, ] <- tidy(pp.test(col))
}
View(save)
variables <- df_seas[,8:13]
save <- matrix(nrow=3*ncol(variables), ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[i, ] <- tidy(pp.test(col))
}
View(save)
save
variables <- df_seas[,8:13]
save <- matrix(nrow=6, ncol=3)
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[i, ] <- tidy(pp.test(col))
}
save
for (i in 1:ncol(variables)) {
col <- variables[,i]
save <- tidy(pp.test(col))
}
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
}
View(save)
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save <- tidy(pp.test(col))
}
View(raw_plot6)
View(save)
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
pp[[i]] <- tidy(pp.test(col))
save[i,] <- pp
View(save)
for (i in 1:ncol(variables)) {
col <- variables[,i]
pp <- tidy(pp.test(col))
save[i,] <- pp
}
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
}
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
}
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
}
View(save)
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save <- tidy(pp.test(col))
}
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save <- tidy(pp.test(col))
}
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[i,] <- tidy(pp.test(col))
}
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[,i] <- tidy(pp.test(col))
}
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
}
install.packages("aTSA")
install.packages("broom")
install.packages("broom")
library(aTSA)
library(broom)
variables <- df_seas[,8:13]
save <- matrix(nrow=18, ncol=3)
#apply(variables,2,pp.test)
for (i in 1:ncol(variables)) {
col <- variables[,i]
save[[i]] <- tidy(pp.test(col))
}
View(save)
save
save[[1:6,]]
save[1:6,]
save[[1:6]]
install.packages(c("cpp11", "dbplyr", "digest", "haven", "jsonlite", "KernSmooth", "Matrix", "MatrixModels", "mgcv", "pkgload", "processx", "Rcpp", "readxl", "rmarkdown", "rstudioapi", "testthat", "xml2"))
path <- getwd()
library(writexl)#para exportar el excel
library(vars)
library(forecast)#for lag selection VAR
library(tidyverse)#manipulation de datos en general
library(xtable)#para tablas de latex
library(cointReg)#para FMOLS
library(urca)#para test de Johansen
library(dplyr)#manipulacion de datos en general
library(googlesheets4)#para importar de G. Drive
library(TSstudio)
library(patchwork)#para combinar graficos en una imagen
library(zoo)#funciones de series de tiempo
library(seasonal)#Para desestacionalizar
library(TSstudio)#PAra desestacionalizar
library(ggpubr)
library(patchwork) # para combinar graficos
library(aTSA)
library(broom)
library(dplyr)
library(stargazer)
library(vars)
raw_data <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA",
col_names = TRUE,
range = "A1:H65"
)
rm(list = ls())
raw_data <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA",
col_names = TRUE,
range = "A1:H65"
)
raw_data2 <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA2",
col_names = TRUE,
range = "A1:H65"
raw_data2 <- read_sheet("https://docs.google.com/spreadsheets/d/15_lA3MjsOMDQinHgw2A93T7tTmHdqEpOQGHSFFtkpIU/edit?usp=sharing",
sheet = "RAW_DATA2",
col_names = TRUE,
range = "A1:H65"
)
raw_data <- raw_data %>%
rename(
"date" = "DATE",
"gdp" = "RAW_GDP",
"gov_con" = "RAW_GOV_CON",
"pub_inv" = "RAW_PUB_INV",
"priv_inv" = "RAW_PRIV_INV",
"x" = "RAW_X",
"m" = "RAW_M",
"pop" = "RAW_POP"
)
var_names_bcn <- c("date", "gdp", "gov_con", "pub_inv", "priv_inv", "x", "m", "pop")
raw_data <- raw_data %>%
mutate(
gdp = gdp*10^6,
gov_con =gov_con*10^6,
pub_inv= pub_inv*10^6,
priv_inv=priv_inv*10^6,
x=x*10^6,
m=m*10^6
)
raw_pop <- ggplot(raw_data, aes(x = as.Date(date), y = pop)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_pop
raw_data <- raw_data %>%
mutate(
growth_pop = ifelse(date >= "2012-10-01" & date<= "2021-04-01"  , pop/lag(pop)-1,0)
)
for (x in 62:64) {
raw_data[x,9] = (raw_data[x-1,9] +raw_data[x-2,9] +raw_data[x-3,9] +raw_data[x-4,9])/4
}
for (x in 28:1) {
raw_data[x,9] = (raw_data[x+1,9] +raw_data[x+2,9] +raw_data[x+3,9] +raw_data[x+4,9])/4
}
for (x in 26:1) {
raw_data[x, 8] = raw_data[x+1, 8]/(1+raw_data[x+1,9])
}
for (x in 62:64) {
raw_data[x,8] = raw_data[x-1,8]*(1+ raw_data[x,9])
}
tr_pop <- ggplot(raw_data, aes(x = as.Date(date), y = pop)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")+
theme_classic()+
theme(plot.caption = element_text(hjust = 0),
plot.title.position = "plot",
plot.title = element_text(color = "black", size = 14, face = "bold"),
plot.subtitle = element_text(color = "black", size = 11, face = "italic"),
plot.caption.position = "plot",
)+
ggtitle("PoblaciÃ³n")+
labs(x="",
y="",
title = "PoblaciÃ³n total",
subtitle = "Habitantes",
caption = "Fuente: ElaboraciÃ³n y cÃ¡lculos propios con base en datos de INIDE")
tr_pop
ggsave("population_con_titulo.png", width=10, height =7 , units= c("cm"), dpi=500)
tr_pop_2 <- ggplot(raw_data, aes(x = as.Date(date), y = pop)) +
geom_line() +
scale_x_date(date_breaks = "years" , date_labels = "%b %Y")+
theme_classic()+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.caption = element_text(hjust = 0),
plot.title.position = "plot",
plot.title = element_text(color = "black", size = 14, face = "bold"),
plot.subtitle = element_text(color = "black", size = 11, face = "italic"),
plot.caption.position = "plot",
axis.text.x = element_text(angle=90, hjust = 1)
)+
#ggtitle("PoblaciÃ³n")+
labs(x="",
y="")
#    title = "",
#   subtitle = "",
#  caption = "")
tr_pop_2
ggsave("population_sin_titulo.png", width=10, height =7 , units= c("cm"), dpi=500)
validacion_pop <- data_frame(raw_data$date, raw_data$pop, raw_data2$RAW_POP)
validacion_pop <- validacion_pop %>%
mutate(
diff = raw_data$pop-raw_data2$RAW_POP
)
validacion_pop <- ggplot(validacion_pop, aes(as.Date(raw_data$date))) +
geom_line(aes(x = as.Date(raw_data$date), y=raw_data$pop)) +
geom_line(aes(x = as.Date(raw_data$date), y=raw_data2$RAW_POP))
validacion_pop
raw_data <- raw_data %>%
mutate(
gdp_pc = gdp/pop,
gov_gdp = (gov_con + pub_inv)/gdp,
gov_con_gdp = gov_con/gdp,
pub_inv_gdp= pub_inv/gdp,
priv_inv_gdp = priv_inv/gdp,
tr_op = (x+m)/gdp,
)
#create growth gdp per capita
raw_data <- raw_data %>%
mutate(
growth_gdp_pc = gdp_pc/lag(gdp_pc)-1
)
#create dummies
raw_data <- raw_data %>%
mutate(
d_2008 = ifelse(date >= "2008-7-1" & date <= "2009-4-1" ,1,0)
)
raw_data <- raw_data %>%
mutate(
d_2018 = ifelse(date >= "2017-10-1",1,0)
)
#Time series set
ts_vars <- ts(data = raw_data[,10:ncol(raw_data)],
start = c(2006,1),
frequency = 4
)
#creating variable for date
df <- as.data.frame(raw_data)
df$date<-as.Date(df$date,  "%m/%d/%y")
raw_plot1 <- ggplot(df, aes(x = date, y = df$gdp_pc)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot2 <- ggplot(df, aes(x = date, y = df$gov_gdp)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot3 <- ggplot(df, aes(x = date, y = df$gov_con_gdp)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot4 <- ggplot(df, aes(x = date, y = df$pub_inv_gdp)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot5 <- ggplot(df, aes(x = date, y = df$priv_inv_gdp)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
raw_plot6 <- ggplot(df, aes(x = date, y =  df$tr_op)) +
geom_line() +
scale_x_date(date_labels = "%b %Y")
combined_plot_raw <- ggarrange(raw_plot1,
raw_plot2,
raw_plot3,
raw_plot4,
raw_plot5,
raw_plot6,
nrow = 2,
ncol = 3) #nrow & ncol depend on how you want to #organize your plots
combined_plot_raw
seasonal_adj <- seas(x = ts_vars[,1:7])
#series(seasonal_adj,c("forecast.forecasts","s12"))
seasonal_adj <- final(seasonal_adj)
df_seas <- as.data.frame(seasonal_adj)
df_seas <- cbind(df$date, df_seas[,])
df_seas <- df_seas %>%
rename("date" = "df$date",
"gdp_pc_s"="gdp_pc",
"gov_gdp_s"="gov_gdp",
"gov_con_gdp_s"="gov_con_gdp",
"pub_inv_gdp_s"="pub_inv_gdp",
"priv_inv_gdp_s"="priv_inv_gdp",
"tr_op_s"="tr_op"
)
df_seas$date<-as.Date(df_seas$date,  "%m/%d/%y")
#Log tranasformation to GDP_pc
df_seas <- df_seas %>%
mutate(
log_gdp_pc_s= log(gdp_pc_s)
)
seas_plot1 <- ggplot(df_seas, aes(x = date, y = df_seas[,2])) +
geom_line() +
geom_smooth(method="lm", se=FALSE,  linetype = "dashed")+
scale_x_date(date_breaks = "years" , date_labels = "%Y")+
theme_classic()+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.caption = element_text(hjust = 0),
plot.title.position = "plot",
plot.title = element_text(color = "black", size = 10, face = "bold"),
plot.subtitle = element_text(color = "black", size = 7, face = "italic"),
plot.caption.position = "plot",
axis.text.x = element_text(angle=90, hjust = 1)
)+
#ggtitle("Producto Interno Bruto Per Capita")+
labs(x="",y="",title = "Producto Interno Bruto Per Capita",
subtitle = "Cordobas constantes por habitante", )
seas_plot2 <- ggplot(df_seas, aes(x = date, y = df_seas[,3])) +
geom_line() +
geom_smooth(method="lm", se=FALSE,  linetype = "dashed")+
scale_x_date(date_breaks = "years" , date_labels = "%Y")+
theme_classic()+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.caption = element_text(hjust = 0),
plot.title.position = "plot",
plot.title = element_text(color = "black", size = 10, face = "bold"),
plot.subtitle = element_text(color = "black", size = 7, face = "italic"),
plot.caption.position = "plot",
axis.text.x = element_text(angle=90, hjust = 1)
)+
labs(x="",y="",title = "Gasto de Goberno agregado",
subtitle = "Porcentaje respecto al PIB p.c.", )
seas_plot3 <- ggplot(df_seas, aes(x = date, y = df_seas[,4])) +
geom_line() +
geom_smooth(method="lm", se=FALSE,  linetype = "dashed")+
scale_x_date(date_breaks = "years" , date_labels = "%Y")+
theme_classic()+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.caption = element_text(hjust = 0),
plot.title.position = "plot",
plot.title = element_text(color = "black", size = 10, face = "bold"),
plot.subtitle = element_text(color = "black", size = 7, face = "italic"),
plot.caption.position = "plot",
axis.text.x = element_text(angle=90, hjust = 1)
)+
#ggtitle("Producto Interno Bruto Per Capita")+
labs(x="",y="",title = "Gasto de Goberno corriente",
subtitle = "Porcentaje respecto al PIB p.c.", )
seas_plot4 <- ggplot(df_seas, aes(x = date, y = df_seas[,5])) +
geom_line() +
geom_smooth(method="lm", se=FALSE,  linetype = "dashed")+
scale_x_date(date_breaks = "years" , date_labels = "%Y")+
theme_classic()+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.caption = element_text(hjust = 0),
plot.title.position = "plot",
plot.title = element_text(color = "black", size = 10, face = "bold"),
plot.subtitle = element_text(color = "black", size = 7, face = "italic"),
plot.caption.position = "plot",
axis.text.x = element_text(angle=90, hjust = 1)
)+
#ggtitle("Producto Interno Bruto Per Capita")+
labs(x="",y="",title = "InversiÃ³n fija pÃºblica",
subtitle = "Porcentaje respecto al PIB p.c.", )
seas_plot5 <- ggplot(df_seas, aes(x = date, y = df_seas[,6])) +
geom_line() +
geom_smooth(method="lm", se=FALSE,  linetype = "dashed")+
scale_x_date(date_breaks = "years" , date_labels = "%Y")+
theme_classic()+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.caption = element_text(hjust = 0),
plot.title.position = "plot",
plot.title = element_text(color = "black", size = 10, face = "bold"),
plot.subtitle = element_text(color = "black", size = 7, face = "italic"),
plot.caption.position = "plot",
axis.text.x = element_text(angle=90, hjust = 1)
)+
#ggtitle("Inversion Fija Privada")+
labs(x="",y="",title = "InversiÃ³n fija privada",
subtitle = "Porcentaje respecto al PIB p.c.", )
seas_plot6 <- ggplot(df_seas, aes(x = date, y = df_seas[,7])) +
geom_line() +
geom_smooth(method="lm", se=FALSE,  linetype = "dashed")+
scale_x_date(date_breaks = "years" , date_labels = "%Y")+
theme_classic()+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.caption = element_text(hjust = 0),
plot.title.position = "plot",
plot.title = element_text(color = "black", size = 10, face = "bold"),
plot.subtitle = element_text(color = "black", size = 7, face = "italic"),
plot.caption.position = "plot",
axis.text.x = element_text(angle=90, hjust = 1)
)+
#ggtitle("Apertura Comercial")+
labs(x="",y="",title = "Apertura comercial",
subtitle = "Porcentaje respecto al PIB p.c.", )
combined_plot_seas <- ggarrange(seas_plot1,
seas_plot2,
seas_plot3,
seas_plot4,
seas_plot5,
seas_plot6,
nrow = 2,
ncol = 3) #nrow & ncol depend on how you want to #organize your plots
combined_plot_seas
ggsave("variables_sin_titulo.png", width=24, height =14 , units= c("cm"), dpi=500)
seas_plot7 <- ggplot(df_seas, aes(x =df_seas[,3])) +
geom_point(aes (y=df_seas[,2]), shape=16)+
geom_smooth(aes(y=df_seas[,2]), method="lm", formula = y ~ x + I(x^2), se=FALSE)+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()
#      plot.caption = element_text(hjust = 0),
#      plot.title.position = "plot",
#      plot.title = element_text(color = "black", size = 10, face = "bold"),
#      plot.subtitle = element_text(color = "black", size = 7, face = "italic"),
#      plot.caption.position = "plot",
#      axis.text.x = element_text(angle=90, hjust = 1)
)+
labs(x="",y="")
#     title = "Titulo",
#    subtitle = "Subtitulo", )
seas_plot7
ggsave("gdp_vs_aggregate_exp.png", width=24, height =14 , units= c("cm"), dpi=500)
seas_plot8 <- ggplot(df_seas, aes(x =df_seas[,5])) +
geom_point(aes (y=df_seas[,2]), shape=16)+
geom_smooth(aes(y=df_seas[,2]), method="lm", formula = y ~ x + I(x^2), se=FALSE)+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()
#      plot.caption = element_text(hjust = 0),
#      plot.title.position = "plot",
#      plot.title = element_text(color = "black", size = 10, face = "bold"),
#      plot.subtitle = element_text(color = "black", size = 7, face = "italic"),
#      plot.caption.position = "plot",
#      axis.text.x = element_text(angle=90, hjust = 1)
)+
labs(x="",y="")
seas_plot8
ggsave("gdp_vs_public_inv.png", width=24, height =14 , units= c("cm"), dpi=500)
exploratory_analysis_tex <- stargazer(df_seas[,2:7])
stargazer(df_seas[,2:7], type='text')
df_modelo1 <- as.data.frame(c(df_seas[,2:3],df_seas[,6:7]))
colnames(df_modelo1)<- c("gdp_pc_s", "gov_gdp_s", "priv_inv_gdp_s","tr_op_s")
df_modelo2 <- as.data.frame(cbind.data.frame(df_seas[,2],df_seas[,5:7]))
colnames(df_modelo2)<- c("gdp_pc_s", "pub_inv_gdp_s", "priv_inv_gdp_s","tr_op_s")
df_modelo1 <- data.frame(df_modelo1, df[,17:18])
df_modelo2 <- data.frame(df_modelo2, df[,17:18])
write_xlsx(raw_data, paste(path,"raw_data.xlsx", sep="/"))
write_xlsx(df_seas, paste(path,"df_seas.xlsx", sep="/"))
write_xlsx(df_modelo1, paste(path,"df_modelo1.xlsx", sep="/"))
write_xlsx(df_modelo2, paste(path,"df_modelo2.xlsx", sep="/"))
path <- getwd()
write_xlsx(raw_data, paste(path,"raw_data.xlsx", sep="/"))
write_xlsx(df_seas, paste(path,"df_seas.xlsx", sep="/"))
write_xlsx(df_modelo1, paste(path,"df_modelo1.xlsx", sep="/"))
write_xlsx(df_modelo2, paste(path,"df_modelo2.xlsx", sep="/"))
write.csv(raw_data, paste(path,"raw_data.xlsx", sep="/"))
write.csv(raw_data, paste(path,"raw_data.csv", sep="/"))
write.csv(df_seas, paste(path,"df_seas.csv", sep="/"))
write.csv(df_modelo1, paste(path,"df_modelo1.csv", sep="/"))
write.csv(df_modelo2, paste(path,"df_modelo2.csv", sep="/"))
lin_2_mco <- lm(log(gdp_pc_s) ~ pub_inv_gdp_s + priv_inv_gdp_s + tr_op_s + d_2008 + d_2018, df_modelo2)
summary(lin_2_mco)
stargazer(lin_2_mco, type="text")
View(lin_2_mco)
View(raw_data)
